{
  "stats": {
    "suites": 61,
    "tests": 172,
    "passes": 172,
    "pending": 0,
    "failures": 0,
    "start": "2022-01-28T18:03:17.664Z",
    "end": "2022-01-28T18:03:20.233Z",
    "duration": 2569,
    "testsRegistered": 172,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e79ae537-03d4-44c7-9a5d-07c6e05b8c27",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "75745e5d-20ca-426f-a1a8-06420df9c5e1",
          "title": "the function to get the account page",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\account-controller-test.js",
          "file": "\\test\\account-controller-test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"the function to get the account page\"",
              "fullTitle": "the function to get the account page \"before each\" hook in \"the function to get the account page\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1zn663m2ch().f[1]++;cov_1zn663m2ch().s[12]++;res={status:sinon.stub().returnsThis(),json:sinon.stub(),send:sinon.stub()};cov_1zn663m2ch().s[13]++;expectedResult=[{_id:'01234',firstName:'mark',lastName:'sy',username:'cheems',role:'inventory-manager',status:'pending'},{_id:'01235',firstName:'bark',lastName:'see',username:'doge',role:'transaction-cashier',status:'rejected'}];",
              "err": {},
              "uuid": "c0103b7f-bfa3-4d5d-bb11-045fb8b7168d",
              "parentUUID": "75745e5d-20ca-426f-a1a8-06420df9c5e1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should retrieve all the accounts only once if the user is the administrator",
              "fullTitle": "the function to get the account page should retrieve all the accounts only once if the user is the administrator",
              "timedOut": false,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1zn663m2ch().f[2]++;const req=(cov_1zn663m2ch().s[15]++,{session:{role:'administrator'}});cov_1zn663m2ch().s[16]++;sinon.stub(db,'findMany').yields(expectedResult);cov_1zn663m2ch().s[17]++;accountController.getAccount(req,res);cov_1zn663m2ch().s[18]++;assert.isTrue(db.findMany.calledOnce);cov_1zn663m2ch().s[19]++;db.findMany.restore();",
              "err": {},
              "uuid": "7b62db23-8e51-4f41-be52-7d01cdcb1482",
              "parentUUID": "75745e5d-20ca-426f-a1a8-06420df9c5e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve all the accounts with the correct arguments if the user is an administrator",
              "fullTitle": "the function to get the account page should retrieve all the accounts with the correct arguments if the user is an administrator",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1zn663m2ch().f[3]++;const req=(cov_1zn663m2ch().s[21]++,{session:{role:'administrator'}});cov_1zn663m2ch().s[22]++;sinon.stub(db,'findMany').yields(expectedResult);cov_1zn663m2ch().s[23]++;accountController.getAccount(req,res);cov_1zn663m2ch().s[24]++;assert.equal(db.findMany.firstCall.args[0],Account);cov_1zn663m2ch().s[25]++;expect(db.findMany.firstCall.args[1]).to.deep.equalInAnyOrder({});cov_1zn663m2ch().s[26]++;assert.equal(db.findMany.firstCall.args[2],'_id firstName lastName username role status');cov_1zn663m2ch().s[27]++;db.findMany.restore();",
              "err": {},
              "uuid": "eaf98d75-9831-4c39-b435-1ad2e5e83a38",
              "parentUUID": "75745e5d-20ca-426f-a1a8-06420df9c5e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve exactly one account only once if the user is not an administrator",
              "fullTitle": "the function to get the account page should retrieve exactly one account only once if the user is not an administrator",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1zn663m2ch().f[4]++;const req=(cov_1zn663m2ch().s[29]++,{session:{username:'jana',role:'inventory-manager'}});cov_1zn663m2ch().s[30]++;sinon.stub(db,'findOne').yields(expectedResult[0]);cov_1zn663m2ch().s[31]++;accountController.getAccount(req,res);cov_1zn663m2ch().s[32]++;assert.isTrue(db.findOne.calledOnce);cov_1zn663m2ch().s[33]++;db.findOne.restore();",
              "err": {},
              "uuid": "7ce5dc68-3d5a-4813-a141-392591163493",
              "parentUUID": "75745e5d-20ca-426f-a1a8-06420df9c5e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve exactly one account with the correct arguments if the user is not an administrator",
              "fullTitle": "the function to get the account page should retrieve exactly one account with the correct arguments if the user is not an administrator",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1zn663m2ch().f[5]++;const req=(cov_1zn663m2ch().s[35]++,{session:{username:'jana',role:'inventory-manager'}});cov_1zn663m2ch().s[36]++;sinon.stub(db,'findOne').yields(expectedResult[0]);cov_1zn663m2ch().s[37]++;accountController.getAccount(req,res);cov_1zn663m2ch().s[38]++;assert.equal(db.findOne.firstCall.args[0],Account);cov_1zn663m2ch().s[39]++;expect(db.findOne.firstCall.args[1]).to.deep.equalInAnyOrder({username:req.session.username});cov_1zn663m2ch().s[40]++;assert.equal(db.findOne.firstCall.args[2],'email firstName lastName role password');cov_1zn663m2ch().s[41]++;db.findOne.restore();",
              "err": {},
              "uuid": "d7b0f34b-2855-4af5-9d29-dc28347e7e71",
              "parentUUID": "75745e5d-20ca-426f-a1a8-06420df9c5e1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7b62db23-8e51-4f41-be52-7d01cdcb1482",
            "eaf98d75-9831-4c39-b435-1ad2e5e83a38",
            "7ce5dc68-3d5a-4813-a141-392591163493",
            "d7b0f34b-2855-4af5-9d29-dc28347e7e71"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 45,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "4e06e373-0dcf-442d-a021-ffb387991861",
          "title": "the function to update the status of the selected user account to \"Rejected\"",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\account-controller-test.js",
          "file": "\\test\\account-controller-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should update the status of the account only once",
              "fullTitle": "the function to update the status of the selected user account to \"Rejected\" should update the status of the account only once",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1zn663m2ch().f[7]++;const convertToObjectId=(cov_1zn663m2ch().s[44]++,sinon.stub(db,'convertToObjectId'));cov_1zn663m2ch().s[45]++;convertToObjectId.returns('123');const req=(cov_1zn663m2ch().s[46]++,{body:{accountId:'123'}});const res=(cov_1zn663m2ch().s[47]++,{status:sinon.stub().returnsThis(),json:sinon.stub(),send:sinon.stub()});cov_1zn663m2ch().s[48]++;sinon.stub(db,'updateOne').yields({});cov_1zn663m2ch().s[49]++;accountController.postEditStatusReject(req,res);cov_1zn663m2ch().s[50]++;assert.isTrue(db.updateOne.calledOnce);cov_1zn663m2ch().s[51]++;db.convertToObjectId.restore();cov_1zn663m2ch().s[52]++;db.updateOne.restore();",
              "err": {},
              "uuid": "bbb7cd6c-1754-49ad-8834-2392f67087d5",
              "parentUUID": "4e06e373-0dcf-442d-a021-ffb387991861",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update the status of the account to \"Rejected\"",
              "fullTitle": "the function to update the status of the selected user account to \"Rejected\" should update the status of the account to \"Rejected\"",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1zn663m2ch().f[8]++;const convertToObjectId=(cov_1zn663m2ch().s[54]++,sinon.stub(db,'convertToObjectId'));cov_1zn663m2ch().s[55]++;convertToObjectId.returns('123');const req=(cov_1zn663m2ch().s[56]++,{body:{accountId:'123'}});const res=(cov_1zn663m2ch().s[57]++,{status:sinon.stub().returnsThis(),json:sinon.stub(),send:sinon.stub()});const filter=(cov_1zn663m2ch().s[58]++,{_id:convertToObjectId('123')});cov_1zn663m2ch().s[59]++;sinon.stub(db,'updateOne').yields({});cov_1zn663m2ch().s[60]++;accountController.postEditStatusReject(req,res);cov_1zn663m2ch().s[61]++;assert.equal(db.updateOne.firstCall.args[0],Account);cov_1zn663m2ch().s[62]++;expect(db.updateOne.firstCall.args[1]).to.deep.equalInAnyOrder(filter);cov_1zn663m2ch().s[63]++;expect(db.updateOne.firstCall.args[2]).to.deep.equalInAnyOrder({status:'Rejected'});cov_1zn663m2ch().s[64]++;db.convertToObjectId.restore();cov_1zn663m2ch().s[65]++;db.updateOne.restore();",
              "err": {},
              "uuid": "446ebf07-00ab-439d-855d-54a01a9eebec",
              "parentUUID": "4e06e373-0dcf-442d-a021-ffb387991861",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bbb7cd6c-1754-49ad-8834-2392f67087d5",
            "446ebf07-00ab-439d-855d-54a01a9eebec"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "52d71a07-59d9-40a5-89a1-97416784f9fa",
          "title": "the function to update the status of the selected user account to \"Pending\"",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\account-controller-test.js",
          "file": "\\test\\account-controller-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should update the status of the account only once",
              "fullTitle": "the function to update the status of the selected user account to \"Pending\" should update the status of the account only once",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1zn663m2ch().f[10]++;const convertToObjectId=(cov_1zn663m2ch().s[68]++,sinon.stub(db,'convertToObjectId'));cov_1zn663m2ch().s[69]++;convertToObjectId.returns('123');const req=(cov_1zn663m2ch().s[70]++,{body:{accountId:'123'}});const res=(cov_1zn663m2ch().s[71]++,{status:sinon.stub().returnsThis(),json:sinon.stub(),send:sinon.stub()});cov_1zn663m2ch().s[72]++;sinon.stub(db,'updateOne').yields({});cov_1zn663m2ch().s[73]++;accountController.postEditStatusPending(req,res);cov_1zn663m2ch().s[74]++;assert.isTrue(db.updateOne.calledOnce);cov_1zn663m2ch().s[75]++;db.convertToObjectId.restore();cov_1zn663m2ch().s[76]++;db.updateOne.restore();",
              "err": {},
              "uuid": "03e4c92f-fc95-4464-817e-489a87aa838f",
              "parentUUID": "52d71a07-59d9-40a5-89a1-97416784f9fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update the status of the account to \"Pending\"",
              "fullTitle": "the function to update the status of the selected user account to \"Pending\" should update the status of the account to \"Pending\"",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1zn663m2ch().f[11]++;const convertToObjectId=(cov_1zn663m2ch().s[78]++,sinon.stub(db,'convertToObjectId'));cov_1zn663m2ch().s[79]++;convertToObjectId.returns('123');const req=(cov_1zn663m2ch().s[80]++,{body:{accountId:'123'}});const res=(cov_1zn663m2ch().s[81]++,{status:sinon.stub().returnsThis(),json:sinon.stub(),send:sinon.stub()});const filter=(cov_1zn663m2ch().s[82]++,{_id:convertToObjectId('123')});cov_1zn663m2ch().s[83]++;sinon.stub(db,'updateOne').yields({});cov_1zn663m2ch().s[84]++;accountController.postEditStatusPending(req,res);cov_1zn663m2ch().s[85]++;assert.equal(db.updateOne.firstCall.args[0],Account);cov_1zn663m2ch().s[86]++;expect(db.updateOne.firstCall.args[1]).to.deep.equalInAnyOrder(filter);cov_1zn663m2ch().s[87]++;expect(db.updateOne.firstCall.args[2]).to.deep.equalInAnyOrder({status:'Pending'});cov_1zn663m2ch().s[88]++;db.convertToObjectId.restore();cov_1zn663m2ch().s[89]++;db.updateOne.restore();",
              "err": {},
              "uuid": "380fcf8f-8674-4e3b-b1cc-1700d795c3f1",
              "parentUUID": "52d71a07-59d9-40a5-89a1-97416784f9fa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "03e4c92f-fc95-4464-817e-489a87aa838f",
            "380fcf8f-8674-4e3b-b1cc-1700d795c3f1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "2f6f4a3f-db81-408b-9d5e-8766d6c47649",
          "title": "the function to update the status of the selected user account to \"Accepted\"",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\account-controller-test.js",
          "file": "\\test\\account-controller-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should update the status of the account only once",
              "fullTitle": "the function to update the status of the selected user account to \"Accepted\" should update the status of the account only once",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1zn663m2ch().f[13]++;const convertToObjectId=(cov_1zn663m2ch().s[92]++,sinon.stub(db,'convertToObjectId'));cov_1zn663m2ch().s[93]++;convertToObjectId.returns('123');const req=(cov_1zn663m2ch().s[94]++,{body:{accountId:'123'}});const res=(cov_1zn663m2ch().s[95]++,{status:sinon.stub().returnsThis(),json:sinon.stub(),send:sinon.stub()});cov_1zn663m2ch().s[96]++;sinon.stub(db,'updateOne').yields({});cov_1zn663m2ch().s[97]++;accountController.postEditStatusAccept(req,res);cov_1zn663m2ch().s[98]++;assert.isTrue(db.updateOne.calledOnce);cov_1zn663m2ch().s[99]++;db.convertToObjectId.restore();cov_1zn663m2ch().s[100]++;db.updateOne.restore();",
              "err": {},
              "uuid": "28bee0dd-1cc4-46eb-88fa-38d5eb3b6b2f",
              "parentUUID": "2f6f4a3f-db81-408b-9d5e-8766d6c47649",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update the status of the account to \"Accepted\"",
              "fullTitle": "the function to update the status of the selected user account to \"Accepted\" should update the status of the account to \"Accepted\"",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1zn663m2ch().f[14]++;const convertToObjectId=(cov_1zn663m2ch().s[102]++,sinon.stub(db,'convertToObjectId'));cov_1zn663m2ch().s[103]++;convertToObjectId.returns('123');const req=(cov_1zn663m2ch().s[104]++,{body:{accountId:'123'}});const res=(cov_1zn663m2ch().s[105]++,{status:sinon.stub().returnsThis(),json:sinon.stub(),send:sinon.stub()});const filter=(cov_1zn663m2ch().s[106]++,{_id:convertToObjectId('123')});cov_1zn663m2ch().s[107]++;sinon.stub(db,'updateOne').yields({});cov_1zn663m2ch().s[108]++;accountController.postEditStatusAccept(req,res);cov_1zn663m2ch().s[109]++;assert.equal(db.updateOne.firstCall.args[0],Account);cov_1zn663m2ch().s[110]++;expect(db.updateOne.firstCall.args[1]).to.deep.equalInAnyOrder(filter);cov_1zn663m2ch().s[111]++;expect(db.updateOne.firstCall.args[2]).to.deep.equalInAnyOrder({status:'Accepted'});cov_1zn663m2ch().s[112]++;db.convertToObjectId.restore();cov_1zn663m2ch().s[113]++;db.updateOne.restore();",
              "err": {},
              "uuid": "2d88bb24-79b5-40b4-a872-fb4e60b56b93",
              "parentUUID": "2f6f4a3f-db81-408b-9d5e-8766d6c47649",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "28bee0dd-1cc4-46eb-88fa-38d5eb3b6b2f",
            "2d88bb24-79b5-40b4-a872-fb4e60b56b93"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "41ae281e-0c6c-4128-b32b-83806bcadf58",
          "title": "the function to update the role of the selected user account",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\account-controller-test.js",
          "file": "\\test\\account-controller-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should update the role of the account only once",
              "fullTitle": "the function to update the role of the selected user account should update the role of the account only once",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1zn663m2ch().f[16]++;const convertToObjectId=(cov_1zn663m2ch().s[116]++,sinon.stub(db,'convertToObjectId'));cov_1zn663m2ch().s[117]++;convertToObjectId.returns('123');const req=(cov_1zn663m2ch().s[118]++,{body:{accountId:'123',editAccountRole:'inventory-manager'}});const res=(cov_1zn663m2ch().s[119]++,{status:sinon.stub().returnsThis(),json:sinon.stub(),send:sinon.stub()});const filter=(cov_1zn663m2ch().s[120]++,{_id:convertToObjectId('123')});cov_1zn663m2ch().s[121]++;sinon.stub(db,'updateOne').yields({});cov_1zn663m2ch().s[122]++;accountController.postEditRole(req,res);cov_1zn663m2ch().s[123]++;assert.isTrue(db.updateOne.calledOnce);cov_1zn663m2ch().s[124]++;assert.equal(db.updateOne.firstCall.args[0],Account);cov_1zn663m2ch().s[125]++;expect(db.updateOne.firstCall.args[1]).to.deep.equalInAnyOrder(filter);cov_1zn663m2ch().s[126]++;expect(db.updateOne.firstCall.args[2]).to.deep.equalInAnyOrder({role:req.body.editAccountRole});cov_1zn663m2ch().s[127]++;db.convertToObjectId.restore();cov_1zn663m2ch().s[128]++;db.updateOne.restore();",
              "err": {},
              "uuid": "e615df8a-47bc-445e-8fdc-85d87e649dd3",
              "parentUUID": "41ae281e-0c6c-4128-b32b-83806bcadf58",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e615df8a-47bc-445e-8fdc-85d87e649dd3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "fbffb8c0-6f1a-48d0-9c99-ff698e17c6ea",
          "title": "the function to delete the selected user account",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\account-controller-test.js",
          "file": "\\test\\account-controller-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should delete the account only once",
              "fullTitle": "the function to delete the selected user account should delete the account only once",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1zn663m2ch().f[18]++;const convertToObjectId=(cov_1zn663m2ch().s[131]++,sinon.stub(db,'convertToObjectId'));cov_1zn663m2ch().s[132]++;convertToObjectId.returns('123');const req=(cov_1zn663m2ch().s[133]++,{body:{accountId:'123'}});const res=(cov_1zn663m2ch().s[134]++,{status:sinon.stub().returnsThis(),json:sinon.stub(),send:sinon.stub()});cov_1zn663m2ch().s[135]++;sinon.stub(db,'deleteOne').yields({});cov_1zn663m2ch().s[136]++;accountController.postDeleteAccount(req,res);cov_1zn663m2ch().s[137]++;assert.isTrue(db.deleteOne.calledOnce);cov_1zn663m2ch().s[138]++;db.convertToObjectId.restore();cov_1zn663m2ch().s[139]++;db.deleteOne.restore();",
              "err": {},
              "uuid": "f70e4a16-a61b-42b6-a19a-e10bd445348b",
              "parentUUID": "fbffb8c0-6f1a-48d0-9c99-ff698e17c6ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete the account with the correct arguments",
              "fullTitle": "the function to delete the selected user account should delete the account with the correct arguments",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1zn663m2ch().f[19]++;const convertToObjectId=(cov_1zn663m2ch().s[141]++,sinon.stub(db,'convertToObjectId'));cov_1zn663m2ch().s[142]++;convertToObjectId.returns('123');const req=(cov_1zn663m2ch().s[143]++,{body:{accountId:'123'}});const res=(cov_1zn663m2ch().s[144]++,{status:sinon.stub().returnsThis(),json:sinon.stub(),send:sinon.stub()});const filter=(cov_1zn663m2ch().s[145]++,{_id:convertToObjectId('123')});cov_1zn663m2ch().s[146]++;sinon.stub(db,'deleteOne').yields({});cov_1zn663m2ch().s[147]++;accountController.postDeleteAccount(req,res);cov_1zn663m2ch().s[148]++;assert.equal(db.deleteOne.firstCall.args[0],Account);cov_1zn663m2ch().s[149]++;expect(db.deleteOne.firstCall.args[1]).to.deep.equalInAnyOrder(filter);cov_1zn663m2ch().s[150]++;db.convertToObjectId.restore();cov_1zn663m2ch().s[151]++;db.deleteOne.restore();",
              "err": {},
              "uuid": "9ab42f81-7141-476f-ab5e-a0ec0eb3dc17",
              "parentUUID": "fbffb8c0-6f1a-48d0-9c99-ff698e17c6ea",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f70e4a16-a61b-42b6-a19a-e10bd445348b",
            "9ab42f81-7141-476f-ab5e-a0ec0eb3dc17"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "f9ed1352-9706-46f6-84d6-c6d0f8d41e6c",
          "title": "the function to edit the account details",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\account-controller-test.js",
          "file": "\\test\\account-controller-test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"the function to edit the account details\"",
              "fullTitle": "the function to edit the account details \"before each\" hook in \"the function to edit the account details\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1zn663m2ch().f[21]++;cov_1zn663m2ch().s[154]++;res={status:sinon.stub().returnsThis(),json:sinon.stub(),send:sinon.stub()};",
              "err": {},
              "uuid": "b5ba16f0-1514-4215-b278-02251e0eeb6c",
              "parentUUID": "f9ed1352-9706-46f6-84d6-c6d0f8d41e6c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"the function to edit the account details\"",
              "fullTitle": "the function to edit the account details \"after each\" hook in \"the function to edit the account details\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1zn663m2ch().f[22]++;cov_1zn663m2ch().s[156]++;bcrypt.hash.restore();",
              "err": {},
              "uuid": "e50f3828-42e9-473e-b24a-0f8b0405adb0",
              "parentUUID": "f9ed1352-9706-46f6-84d6-c6d0f8d41e6c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should hash the password only once",
              "fullTitle": "the function to edit the account details should hash the password only once",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1zn663m2ch().f[23]++;cov_1zn663m2ch().s[158]++;req={body:{editAccountEmail:'hello@gmail.com',editAccountFName:'hello',editAccountLName:'hello',editAccountUsername:'hello',editAccountNewPassword:'hello',editAccountConfirmPassword:'hello'},session:{username:'hello'}};cov_1zn663m2ch().s[159]++;hash='fasdfasdfa';cov_1zn663m2ch().s[160]++;sinon.stub(bcrypt,'hash').yields(null,hash);cov_1zn663m2ch().s[161]++;accountController.postEditAccount(req,res);cov_1zn663m2ch().s[162]++;assert.isTrue(bcrypt.hash.calledOnce);cov_1zn663m2ch().s[163]++;assert.equal(bcrypt.hash.firstCall.args[0],req.body.editAccountNewPassword);",
              "err": {},
              "uuid": "59356eb0-273c-4096-9ae5-0758ee515773",
              "parentUUID": "f9ed1352-9706-46f6-84d6-c6d0f8d41e6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should hash the correct password",
              "fullTitle": "the function to edit the account details should hash the correct password",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1zn663m2ch().f[24]++;cov_1zn663m2ch().s[165]++;req={body:{editAccountEmail:'hello@gmail.com',editAccountFName:'hello',editAccountLName:'hello',editAccountUsername:'hello',editAccountNewPassword:'hello',editAccountConfirmPassword:'hello'},session:{username:'hello'}};cov_1zn663m2ch().s[166]++;hash='fasdfasdfa';cov_1zn663m2ch().s[167]++;sinon.stub(bcrypt,'hash').yields(null,hash);cov_1zn663m2ch().s[168]++;accountController.postEditAccount(req,res);cov_1zn663m2ch().s[169]++;assert.equal(bcrypt.hash.firstCall.args[0],req.body.editAccountNewPassword);",
              "err": {},
              "uuid": "624daf04-2d64-4799-898f-6eb110de48e4",
              "parentUUID": "f9ed1352-9706-46f6-84d6-c6d0f8d41e6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should hash the password for the specified number of rounds",
              "fullTitle": "the function to edit the account details should hash the password for the specified number of rounds",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1zn663m2ch().f[25]++;cov_1zn663m2ch().s[171]++;req={body:{editAccountEmail:'hello@gmail.com',editAccountFName:'hello',editAccountLName:'hello',editAccountUsername:'hello',editAccountNewPassword:'hello',editAccountConfirmPassword:'hello'},session:{username:'hello'}};cov_1zn663m2ch().s[172]++;hash='fasdfasdfa';cov_1zn663m2ch().s[173]++;sinon.stub(bcrypt,'hash').yields(null,hash);cov_1zn663m2ch().s[174]++;accountController.postEditAccount(req,res);cov_1zn663m2ch().s[175]++;assert.equal(bcrypt.hash.firstCall.args[1],saltRounds);",
              "err": {},
              "uuid": "1c078337-c329-47c7-ae36-4d3c1458782f",
              "parentUUID": "f9ed1352-9706-46f6-84d6-c6d0f8d41e6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not hash the password if the passwords do not match",
              "fullTitle": "the function to edit the account details should not hash the password if the passwords do not match",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1zn663m2ch().f[26]++;cov_1zn663m2ch().s[177]++;req={body:{editAccountEmail:'hello@gmail.com',editAccountFName:'hello',editAccountLName:'hello',editAccountUsername:'hello',editAccountNewPassword:'hello',editAccountConfirmPassword:'hi'},session:{username:'hello'}};cov_1zn663m2ch().s[178]++;hash='fasdfasdfa';cov_1zn663m2ch().s[179]++;sinon.stub(bcrypt,'hash').yields(null,hash);cov_1zn663m2ch().s[180]++;accountController.postEditAccount(req,res);cov_1zn663m2ch().s[181]++;assert.isTrue(bcrypt.hash.notCalled);",
              "err": {},
              "uuid": "e8ef8291-4813-4cbf-9998-0eed5f1f90fa",
              "parentUUID": "f9ed1352-9706-46f6-84d6-c6d0f8d41e6c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "59356eb0-273c-4096-9ae5-0758ee515773",
            "624daf04-2d64-4799-898f-6eb110de48e4",
            "1c078337-c329-47c7-ae36-4d3c1458782f",
            "e8ef8291-4813-4cbf-9998-0eed5f1f90fa"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "eb750228-e864-49af-9e5f-f3ee20ab68b1",
          "title": "the function to get the successful edit page",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\account-controller-test.js",
          "file": "\\test\\account-controller-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render the page only once",
              "fullTitle": "the function to get the successful edit page should render the page only once",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1zn663m2ch().f[28]++;const req=(cov_1zn663m2ch().s[184]++,sinon.spy());const res=(cov_1zn663m2ch().s[185]++,{render:sinon.spy()});cov_1zn663m2ch().s[186]++;accountController.getSuccessfulEdit(req,res);cov_1zn663m2ch().s[187]++;assert.isTrue(res.render.calledOnce);",
              "err": {},
              "uuid": "e6a79c9a-8ac4-41ff-b3d0-b02e608e74b2",
              "parentUUID": "eb750228-e864-49af-9e5f-f3ee20ab68b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render the successful edit page",
              "fullTitle": "the function to get the successful edit page should render the successful edit page",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1zn663m2ch().f[29]++;const req=(cov_1zn663m2ch().s[189]++,sinon.spy());const res=(cov_1zn663m2ch().s[190]++,{render:sinon.spy()});cov_1zn663m2ch().s[191]++;accountController.getSuccessfulEdit(req,res);cov_1zn663m2ch().s[192]++;assert.equal(res.render.firstCall.args[0],'successful-edit');",
              "err": {},
              "uuid": "40ee3546-ec30-4e5c-aaba-a8015830a706",
              "parentUUID": "eb750228-e864-49af-9e5f-f3ee20ab68b1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e6a79c9a-8ac4-41ff-b3d0-b02e608e74b2",
            "40ee3546-ec30-4e5c-aaba-a8015830a706"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "7e43f584-1ceb-4105-bcd1-9e650df1044c",
          "title": "the function to get the edit account page",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\account-controller-test.js",
          "file": "\\test\\account-controller-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render the page only once",
              "fullTitle": "the function to get the edit account page should render the page only once",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1zn663m2ch().f[31]++;const req=(cov_1zn663m2ch().s[195]++,sinon.spy());const res=(cov_1zn663m2ch().s[196]++,{render:sinon.spy()});cov_1zn663m2ch().s[197]++;accountController.getEditAccount(req,res);cov_1zn663m2ch().s[198]++;assert.isTrue(res.render.calledOnce);",
              "err": {},
              "uuid": "756656f5-8ea2-40ff-93e6-d2fcd5d0e1e0",
              "parentUUID": "7e43f584-1ceb-4105-bcd1-9e650df1044c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render the successful edit page",
              "fullTitle": "the function to get the edit account page should render the successful edit page",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1zn663m2ch().f[32]++;const req=(cov_1zn663m2ch().s[200]++,sinon.spy());const res=(cov_1zn663m2ch().s[201]++,{render:sinon.spy()});cov_1zn663m2ch().s[202]++;accountController.getEditAccount(req,res);cov_1zn663m2ch().s[203]++;assert.equal(res.render.firstCall.args[0],'edit-account');",
              "err": {},
              "uuid": "7dd0d82b-d210-49f4-a830-33c1bc340569",
              "parentUUID": "7e43f584-1ceb-4105-bcd1-9e650df1044c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "756656f5-8ea2-40ff-93e6-d2fcd5d0e1e0",
            "7dd0d82b-d210-49f4-a830-33c1bc340569"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "74befa30-fbe5-4359-8cc3-8a11ed1587ab",
          "title": "the utility function for retrieving the details of all non-administrator accounts",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\account-controller-util-test.js",
          "file": "\\test\\account-controller-util-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return all the retrieved accounts",
              "fullTitle": "the utility function for retrieving the details of all non-administrator accounts should return all the retrieved accounts",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_7bxxx7q81().f[1]++;const dbResult=(cov_7bxxx7q81().s[6]++,[{_id:'01234',firstName:'mark',lastName:'sy',username:'cheems',role:'inventory-manager',status:'pending'},{_id:'01235',firstName:'bark',lastName:'see',username:'doge',role:'transaction-cashier',status:'rejected'}]);const result=(cov_7bxxx7q81().s[7]++,accountControllerUtil.accountUtil(dbResult));cov_7bxxx7q81().s[8]++;expect(result).to.deep.equalInAnyOrder({accountDetails:dbResult});",
              "err": {},
              "uuid": "43b380f6-c87d-458d-8037-8dc90f0bcbcd",
              "parentUUID": "74befa30-fbe5-4359-8cc3-8a11ed1587ab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should exclude the administrator account from the retrieved accounts",
              "fullTitle": "the utility function for retrieving the details of all non-administrator accounts should exclude the administrator account from the retrieved accounts",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_7bxxx7q81().f[2]++;const dbResult=(cov_7bxxx7q81().s[10]++,[{_id:'01234',firstName:'mark',lastName:'sy',username:'cheems',role:'inventory-manager',status:'pending'},{_id:'01235',firstName:'bark',lastName:'see',username:'doge',role:'transaction-cashier',status:'rejected'},{_id:'01236',firstName:'bork',lastName:'chua',username:'zoie',role:'administrator',status:'rejected'}]);const expectedResult=(cov_7bxxx7q81().s[11]++,[{_id:'01234',firstName:'mark',lastName:'sy',username:'cheems',role:'inventory-manager',status:'pending'},{_id:'01235',firstName:'bark',lastName:'see',username:'doge',role:'transaction-cashier',status:'rejected'}]);const result=(cov_7bxxx7q81().s[12]++,accountControllerUtil.accountUtil(dbResult));cov_7bxxx7q81().s[13]++;expect(result).to.deep.equalInAnyOrder({accountDetails:expectedResult});",
              "err": {},
              "uuid": "120f3dc5-9157-4ce6-ab73-57df09c940f3",
              "parentUUID": "74befa30-fbe5-4359-8cc3-8a11ed1587ab",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "43b380f6-c87d-458d-8037-8dc90f0bcbcd",
            "120f3dc5-9157-4ce6-ab73-57df09c940f3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "57715d76-3572-447c-9194-652188dc0fe5",
          "title": "the function to convert a role to its equivalent value in the database",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\account-util-test.js",
          "file": "\\test\\account-util-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return a string",
              "fullTitle": "the function to convert a role to its equivalent value in the database should return a string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_hu8c4dai0().f[1]++;const result=(cov_hu8c4dai0().s[4]++,getRoleValue('Inventory Manager'));cov_hu8c4dai0().s[5]++;assert.isString(result);",
              "err": {},
              "uuid": "131c8f0e-8446-4cf8-9129-63eb284b1ce9",
              "parentUUID": "57715d76-3572-447c-9194-652188dc0fe5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return inventory-manager if the role is Inventory Manager",
              "fullTitle": "the function to convert a role to its equivalent value in the database should return inventory-manager if the role is Inventory Manager",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_hu8c4dai0().f[2]++;const result=(cov_hu8c4dai0().s[7]++,getRoleValue('Inventory Manager'));cov_hu8c4dai0().s[8]++;assert.equal(result,'inventory-manager');",
              "err": {},
              "uuid": "97d1d086-535e-4e39-b757-a7d0992f066e",
              "parentUUID": "57715d76-3572-447c-9194-652188dc0fe5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return transaction-cashier if the role is Transaction Cashier",
              "fullTitle": "the function to convert a role to its equivalent value in the database should return transaction-cashier if the role is Transaction Cashier",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_hu8c4dai0().f[3]++;const result=(cov_hu8c4dai0().s[10]++,getRoleValue('Transaction Cashier'));cov_hu8c4dai0().s[11]++;assert.equal(result,'transaction-cashier');",
              "err": {},
              "uuid": "58c18471-c0d4-42e4-8b8d-1482a167eb0f",
              "parentUUID": "57715d76-3572-447c-9194-652188dc0fe5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return delivery-manager if the role is Delivery Manager",
              "fullTitle": "the function to convert a role to its equivalent value in the database should return delivery-manager if the role is Delivery Manager",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_hu8c4dai0().f[4]++;const result=(cov_hu8c4dai0().s[13]++,getRoleValue('Delivery Manager'));cov_hu8c4dai0().s[14]++;assert.equal(result,'delivery-manager');",
              "err": {},
              "uuid": "415d5a71-b3db-4fff-89b4-45a6546ab625",
              "parentUUID": "57715d76-3572-447c-9194-652188dc0fe5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "131c8f0e-8446-4cf8-9129-63eb284b1ce9",
            "97d1d086-535e-4e39-b757-a7d0992f066e",
            "58c18471-c0d4-42e4-8b8d-1482a167eb0f",
            "415d5a71-b3db-4fff-89b4-45a6546ab625"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "260c6511-a84a-4f6a-a828-d5e6701363ea",
          "title": "the function to organizing the details across all the delivery items",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\delivery-controller-util.js",
          "file": "\\test\\delivery-controller-util.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should include the correct details of the delivery items without null date values but with single-digit date components",
              "fullTitle": "the function to organizing the details across all the delivery items should include the correct details of the delivery items without null date values but with single-digit date components",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_ziwukgmr2().f[1]++;const dbResult=(cov_ziwukgmr2().s[6]++,[{id:'123',customer:'kurisu',dropoff:'nakahara',status:'pending',date:new Date('2021/2/2')},{id:'124',customer:'misaki',dropoff:'makise',status:'cancelled',date:new Date('2022/1/3')}]);const expectedResult=(cov_ziwukgmr2().s[7]++,{customers:['kurisu','misaki'],dates:['02/02/2021','01/03/2022'],dropoffs:['makise','nakahara'],ids:['123','124'],statuses:['cancelled','pending']});const result=(cov_ziwukgmr2().s[8]++,deliveryControllerUtil.deliveryUtil(dbResult));cov_ziwukgmr2().s[9]++;expect(result).to.deep.equalInAnyOrder(expectedResult);",
              "err": {},
              "uuid": "df9c4700-fa4e-423b-9125-bccf997b6e81",
              "parentUUID": "260c6511-a84a-4f6a-a828-d5e6701363ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should include the correct details of the delivery items without null date values and without single-digit date components",
              "fullTitle": "the function to organizing the details across all the delivery items should include the correct details of the delivery items without null date values and without single-digit date components",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_ziwukgmr2().f[2]++;const dbResult=(cov_ziwukgmr2().s[11]++,[{id:'123',customer:'kurisu',dropoff:'nakahara',status:'pending',date:new Date('2021/10/22')},{id:'124',customer:'misaki',dropoff:'makise',status:'cancelled',date:new Date('2022/11/13')}]);const expectedResult=(cov_ziwukgmr2().s[12]++,{customers:['kurisu','misaki'],dates:['10/22/2021','11/13/2022'],dropoffs:['makise','nakahara'],ids:['123','124'],statuses:['cancelled','pending']});const result=(cov_ziwukgmr2().s[13]++,deliveryControllerUtil.deliveryUtil(dbResult));cov_ziwukgmr2().s[14]++;expect(result).to.deep.equalInAnyOrder(expectedResult);",
              "err": {},
              "uuid": "1851ccac-e096-49c5-a177-0ca3a57f6b1f",
              "parentUUID": "260c6511-a84a-4f6a-a828-d5e6701363ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should include the correct details of the delivery items, including those with null date values",
              "fullTitle": "the function to organizing the details across all the delivery items should include the correct details of the delivery items, including those with null date values",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_ziwukgmr2().f[3]++;const dbResult=(cov_ziwukgmr2().s[16]++,[{id:'123',customer:'kurisu',dropoff:'nakahara',status:'pending',date:null},{id:'124',customer:'misaki',dropoff:'makise',status:'cancelled',date:new Date('2022/1/12')}]);const expectedResult=(cov_ziwukgmr2().s[17]++,{customers:['kurisu','misaki'],dates:[null,'01/12/2022'],dropoffs:['makise','nakahara'],ids:['123','124'],statuses:['cancelled','pending']});const result=(cov_ziwukgmr2().s[18]++,deliveryControllerUtil.deliveryUtil(dbResult));cov_ziwukgmr2().s[19]++;expect(result).to.deep.equalInAnyOrder(expectedResult);",
              "err": {},
              "uuid": "a48c8c25-7ce6-494f-8929-19f197eb489a",
              "parentUUID": "260c6511-a84a-4f6a-a828-d5e6701363ea",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "df9c4700-fa4e-423b-9125-bccf997b6e81",
            "1851ccac-e096-49c5-a177-0ca3a57f6b1f",
            "a48c8c25-7ce6-494f-8929-19f197eb489a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "87606454-1b1c-4086-ac7c-81d98cf9f766",
          "title": "the function to convert a fuel to its equivalent value in the database",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\edit-stock-util-test.js",
          "file": "\\test\\edit-stock-util-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return a string",
              "fullTitle": "the function to convert a fuel to its equivalent value in the database should return a string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2rgijqymnx().f[1]++;const result=(cov_2rgijqymnx().s[4]++,getFuelValue('Gasoline'));cov_2rgijqymnx().s[5]++;assert.isString(result);",
              "err": {},
              "uuid": "0c2486de-8490-412f-841b-8ef89a805d09",
              "parentUUID": "87606454-1b1c-4086-ac7c-81d98cf9f766",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return gasoline if the fuel is Gasoline",
              "fullTitle": "the function to convert a fuel to its equivalent value in the database should return gasoline if the fuel is Gasoline",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2rgijqymnx().f[2]++;const result=(cov_2rgijqymnx().s[7]++,getFuelValue('Gasoline'));cov_2rgijqymnx().s[8]++;assert.equal(result,'gasoline');",
              "err": {},
              "uuid": "2d004664-be57-4ef6-9995-0c6f1ed0c3e4",
              "parentUUID": "87606454-1b1c-4086-ac7c-81d98cf9f766",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return premium-gasoline-95 if the fuel is Premium Gasoline 95",
              "fullTitle": "the function to convert a fuel to its equivalent value in the database should return premium-gasoline-95 if the fuel is Premium Gasoline 95",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2rgijqymnx().f[3]++;const result=(cov_2rgijqymnx().s[10]++,getFuelValue('Premium Gasoline 95'));cov_2rgijqymnx().s[11]++;assert.equal(result,'premium-gasoline-95');",
              "err": {},
              "uuid": "7e5c5fad-9fe9-45da-b770-f096c2586590",
              "parentUUID": "87606454-1b1c-4086-ac7c-81d98cf9f766",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return diesel if the fuel is Diesel",
              "fullTitle": "the function to convert a fuel to its equivalent value in the database should return diesel if the fuel is Diesel",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2rgijqymnx().f[4]++;const result=(cov_2rgijqymnx().s[13]++,getFuelValue('Diesel'));cov_2rgijqymnx().s[14]++;assert.equal(result,'diesel');",
              "err": {},
              "uuid": "6b1fdfc9-f057-4006-afeb-5efbbeeaaed9",
              "parentUUID": "87606454-1b1c-4086-ac7c-81d98cf9f766",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return premium-gasoline-97 if the fuel is Premium Gasoline 97",
              "fullTitle": "the function to convert a fuel to its equivalent value in the database should return premium-gasoline-97 if the fuel is Premium Gasoline 97",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2rgijqymnx().f[5]++;const result=(cov_2rgijqymnx().s[16]++,getFuelValue('Premium Gasoline 97'));cov_2rgijqymnx().s[17]++;assert.equal(result,'premium-gasoline-97');",
              "err": {},
              "uuid": "fd6f3e26-e3cf-4d62-9069-bdfc6cbeb752",
              "parentUUID": "87606454-1b1c-4086-ac7c-81d98cf9f766",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return kerosene if the fuel is Kerosene",
              "fullTitle": "the function to convert a fuel to its equivalent value in the database should return kerosene if the fuel is Kerosene",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2rgijqymnx().f[6]++;const result=(cov_2rgijqymnx().s[19]++,getFuelValue('Kerosene'));cov_2rgijqymnx().s[20]++;assert.equal(result,'kerosene');",
              "err": {},
              "uuid": "35df1ae7-f8ee-4085-8de9-1f4def48e9e9",
              "parentUUID": "87606454-1b1c-4086-ac7c-81d98cf9f766",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0c2486de-8490-412f-841b-8ef89a805d09",
            "2d004664-be57-4ef6-9995-0c6f1ed0c3e4",
            "7e5c5fad-9fe9-45da-b770-f096c2586590",
            "6b1fdfc9-f057-4006-afeb-5efbbeeaaed9",
            "fd6f3e26-e3cf-4d62-9069-bdfc6cbeb752",
            "35df1ae7-f8ee-4085-8de9-1f4def48e9e9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "b9f15297-a0f7-4993-9a17-b9de32633d23",
          "title": "the function to display an error message",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\general-util-test.js",
          "file": "\\test\\general-util-test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"the function to display an error message\"",
              "fullTitle": "the function to display an error message \"before each\" hook in \"the function to display an error message\"",
              "timedOut": false,
              "duration": 198,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_18868q0w6f().f[1]++;const dom=(cov_18868q0w6f().s[8]++,new JSDOM(htmlDom,{url:'http://localhost'}));cov_18868q0w6f().s[9]++;global.window=dom.window;cov_18868q0w6f().s[10]++;global.document=dom.window.document;cov_18868q0w6f().s[11]++;global.$=global.jQuery=require('jquery');",
              "err": {},
              "uuid": "d3c052d3-0899-44c8-a259-e174dd5ff000",
              "parentUUID": "b9f15297-a0f7-4993-9a17-b9de32633d23",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should add d-block as one of the classes",
              "fullTitle": "the function to display an error message should add d-block as one of the classes",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_18868q0w6f().f[2]++;cov_18868q0w6f().s[13]++;displayErrorMessage($('#error'));const result=(cov_18868q0w6f().s[14]++,$('#error').attr('class').includes('d-block'));cov_18868q0w6f().s[15]++;assert.isTrue(result);",
              "err": {},
              "uuid": "daeed81a-49ca-44c8-9b58-a6a74fc64b20",
              "parentUUID": "b9f15297-a0f7-4993-9a17-b9de32633d23",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "daeed81a-49ca-44c8-9b58-a6a74fc64b20"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "b0ac95e4-de81-4776-bbcf-67f20adc227a",
          "title": "the function to hide an error message",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\general-util-test.js",
          "file": "\\test\\general-util-test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"the function to hide an error message\"",
              "fullTitle": "the function to hide an error message \"before each\" hook in \"the function to hide an error message\"",
              "timedOut": false,
              "duration": 33,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_18868q0w6f().f[4]++;const dom=(cov_18868q0w6f().s[18]++,new JSDOM(htmlDom,{url:'http://localhost'}));cov_18868q0w6f().s[19]++;global.window=dom.window;cov_18868q0w6f().s[20]++;global.document=dom.window.document;cov_18868q0w6f().s[21]++;global.$=global.jQuery=require('jquery');",
              "err": {},
              "uuid": "a6ad96b2-3329-4ba3-b96e-08733c473d71",
              "parentUUID": "b0ac95e4-de81-4776-bbcf-67f20adc227a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should add d-block as one of the classes",
              "fullTitle": "the function to hide an error message should add d-block as one of the classes",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_18868q0w6f().f[5]++;cov_18868q0w6f().s[23]++;hideErrorMessage($('#error'));const result=(cov_18868q0w6f().s[24]++,$('#error').attr('class').includes('d-block'));cov_18868q0w6f().s[25]++;assert.isFalse(result);",
              "err": {},
              "uuid": "4e7f6605-b06b-4af8-b1ec-ba902d513c41",
              "parentUUID": "b0ac95e4-de81-4776-bbcf-67f20adc227a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4e7f6605-b06b-4af8-b1ec-ba902d513c41"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "af72e32e-287e-4de9-84ba-eca9b2fbfac2",
          "title": "the function to enable a button",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\general-util-test.js",
          "file": "\\test\\general-util-test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"the function to enable a button\"",
              "fullTitle": "the function to enable a button \"before each\" hook in \"the function to enable a button\"",
              "timedOut": false,
              "duration": 26,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_18868q0w6f().f[7]++;const dom=(cov_18868q0w6f().s[28]++,new JSDOM(htmlDom,{url:'http://localhost'}));cov_18868q0w6f().s[29]++;global.window=dom.window;cov_18868q0w6f().s[30]++;global.document=dom.window.document;cov_18868q0w6f().s[31]++;global.$=global.jQuery=require('jquery');",
              "err": {},
              "uuid": "a29f4dc6-acd6-4ff0-b7e9-7a41e8fc0ec5",
              "parentUUID": "af72e32e-287e-4de9-84ba-eca9b2fbfac2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should set the disabled property to false",
              "fullTitle": "the function to enable a button should set the disabled property to false",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_18868q0w6f().f[8]++;cov_18868q0w6f().s[33]++;enableButton($('#register'));const result=(cov_18868q0w6f().s[34]++,$('#register').prop('disabled'));cov_18868q0w6f().s[35]++;assert.isFalse(result);",
              "err": {},
              "uuid": "4192d467-bebb-43d1-947b-bfdbf12d96ad",
              "parentUUID": "af72e32e-287e-4de9-84ba-eca9b2fbfac2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4192d467-bebb-43d1-947b-bfdbf12d96ad"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "3ee530cd-d4ad-493f-a3d2-791ab9a762b8",
          "title": "the function to disable a button",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\general-util-test.js",
          "file": "\\test\\general-util-test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"the function to disable a button\"",
              "fullTitle": "the function to disable a button \"before each\" hook in \"the function to disable a button\"",
              "timedOut": false,
              "duration": 30,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_18868q0w6f().f[10]++;const dom=(cov_18868q0w6f().s[38]++,new JSDOM(htmlDom,{url:'http://localhost'}));cov_18868q0w6f().s[39]++;global.window=dom.window;cov_18868q0w6f().s[40]++;global.document=dom.window.document;cov_18868q0w6f().s[41]++;global.$=global.jQuery=require('jquery');",
              "err": {},
              "uuid": "451aa045-495d-4cc4-8e14-c38f917f1387",
              "parentUUID": "3ee530cd-d4ad-493f-a3d2-791ab9a762b8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should set the disabled property to true",
              "fullTitle": "the function to disable a button should set the disabled property to true",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_18868q0w6f().f[11]++;cov_18868q0w6f().s[43]++;disableButton($('#register'));const result=(cov_18868q0w6f().s[44]++,$('#register').prop('disabled'));cov_18868q0w6f().s[45]++;assert.isTrue(result);",
              "err": {},
              "uuid": "66598499-fe94-437e-b479-7bd5757f0347",
              "parentUUID": "3ee530cd-d4ad-493f-a3d2-791ab9a762b8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "66598499-fe94-437e-b479-7bd5757f0347"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "d3cb2597-10e1-4231-855d-98e28fa7b2f7",
          "title": "the function to check if a field is blank",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\general-util-test.js",
          "file": "\\test\\general-util-test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"the function to check if a field is blank\"",
              "fullTitle": "the function to check if a field is blank \"before each\" hook in \"the function to check if a field is blank\"",
              "timedOut": false,
              "duration": 19,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_18868q0w6f().f[13]++;const dom=(cov_18868q0w6f().s[48]++,new JSDOM(htmlDom,{url:'http://localhost'}));cov_18868q0w6f().s[49]++;global.window=dom.window;cov_18868q0w6f().s[50]++;global.document=dom.window.document;cov_18868q0w6f().s[51]++;global.$=global.jQuery=require('jquery');",
              "err": {},
              "uuid": "04b3b647-c2b3-4c62-bdb3-3983003b1705",
              "parentUUID": "d3cb2597-10e1-4231-855d-98e28fa7b2f7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return a Boolean",
              "fullTitle": "the function to check if a field is blank should return a Boolean",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_18868q0w6f().f[14]++;const result=(cov_18868q0w6f().s[53]++,isBlankField($('#fname'),true));cov_18868q0w6f().s[54]++;assert.isBoolean(result);",
              "err": {},
              "uuid": "ee36afcb-ccc4-49d6-ab8c-e072cb2eb01c",
              "parentUUID": "d3cb2597-10e1-4231-855d-98e28fa7b2f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true if the field is empty and trimmed is set to true",
              "fullTitle": "the function to check if a field is blank should return true if the field is empty and trimmed is set to true",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_18868q0w6f().f[15]++;const result=(cov_18868q0w6f().s[56]++,isBlankField($('#fname'),true));cov_18868q0w6f().s[57]++;assert.isTrue(result);",
              "err": {},
              "uuid": "76568037-309b-4d14-84b4-e5b083509189",
              "parentUUID": "d3cb2597-10e1-4231-855d-98e28fa7b2f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true if the field is empty and trimmed is set to false",
              "fullTitle": "the function to check if a field is blank should return true if the field is empty and trimmed is set to false",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_18868q0w6f().f[16]++;const result=(cov_18868q0w6f().s[59]++,isBlankField($('#fname'),false));cov_18868q0w6f().s[60]++;assert.isTrue(result);",
              "err": {},
              "uuid": "d6f7bac4-7b3b-4ada-bbb2-a10f78d8dcfb",
              "parentUUID": "d3cb2597-10e1-4231-855d-98e28fa7b2f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true if the field only has spaces and trimmed is set to true",
              "fullTitle": "the function to check if a field is blank should return true if the field only has spaces and trimmed is set to true",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_18868q0w6f().f[17]++;cov_18868q0w6f().s[62]++;$('#fname').val('    ');const result=(cov_18868q0w6f().s[63]++,isBlankField($('#fname'),true));cov_18868q0w6f().s[64]++;assert.isTrue(result);",
              "err": {},
              "uuid": "0f4b0268-4540-40ee-86d6-7bbfbb422e85",
              "parentUUID": "d3cb2597-10e1-4231-855d-98e28fa7b2f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if the field only has spaces and trimmed is set to false",
              "fullTitle": "the function to check if a field is blank should return false if the field only has spaces and trimmed is set to false",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_18868q0w6f().f[18]++;cov_18868q0w6f().s[66]++;$('#fname').val('    ');const result=(cov_18868q0w6f().s[67]++,isBlankField($('#fname'),false));cov_18868q0w6f().s[68]++;assert.isFalse(result);",
              "err": {},
              "uuid": "58fd1175-8ce6-46bc-98c6-b43c42cc1a0e",
              "parentUUID": "d3cb2597-10e1-4231-855d-98e28fa7b2f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if the field has non-space characters and trimmed is set to true",
              "fullTitle": "the function to check if a field is blank should return false if the field has non-space characters and trimmed is set to true",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_18868q0w6f().f[19]++;cov_18868q0w6f().s[70]++;$('#fname').val(' asdfasd   ');const result=(cov_18868q0w6f().s[71]++,isBlankField($('#fname'),true));cov_18868q0w6f().s[72]++;assert.isFalse(result);",
              "err": {},
              "uuid": "f6038600-1b57-4ee1-b8f5-9cfd8d49f33d",
              "parentUUID": "d3cb2597-10e1-4231-855d-98e28fa7b2f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if the field has non-space characters and trimmed is set to false",
              "fullTitle": "the function to check if a field is blank should return false if the field has non-space characters and trimmed is set to false",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_18868q0w6f().f[20]++;cov_18868q0w6f().s[74]++;$('#fname').val(' asdfasd   ');const result=(cov_18868q0w6f().s[75]++,isBlankField($('#fname'),false));cov_18868q0w6f().s[76]++;assert.isFalse(result);",
              "err": {},
              "uuid": "9ac79036-953b-4ece-8057-d6192579375d",
              "parentUUID": "d3cb2597-10e1-4231-855d-98e28fa7b2f7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ee36afcb-ccc4-49d6-ab8c-e072cb2eb01c",
            "76568037-309b-4d14-84b4-e5b083509189",
            "d6f7bac4-7b3b-4ada-bbb2-a10f78d8dcfb",
            "0f4b0268-4540-40ee-86d6-7bbfbb422e85",
            "58fd1175-8ce6-46bc-98c6-b43c42cc1a0e",
            "f6038600-1b57-4ee1-b8f5-9cfd8d49f33d",
            "9ac79036-953b-4ece-8057-d6192579375d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "45ebfb47-64b3-4787-99e5-22a93052691b",
          "title": "the function to extract the database object ID from a browser element ID",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\general-util-test.js",
          "file": "\\test\\general-util-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return the database object ID (substring after the last hyphen delimiter)",
              "fullTitle": "the function to extract the database object ID from a browser element ID should return the database object ID (substring after the last hyphen delimiter)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_18868q0w6f().f[22]++;const result=(cov_18868q0w6f().s[79]++,extractId('edit-role-12345'));cov_18868q0w6f().s[80]++;assert.equal(result,'12345');",
              "err": {},
              "uuid": "132b93ae-490f-4098-abc9-5cbc06abec3a",
              "parentUUID": "45ebfb47-64b3-4787-99e5-22a93052691b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "132b93ae-490f-4098-abc9-5cbc06abec3a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "141e3494-4bd3-4c9c-a314-0e072c8bd998",
          "title": "the function to display a number to two decimal places",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\general-util-test.js",
          "file": "\\test\\general-util-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return a string",
              "fullTitle": "the function to display a number to two decimal places should return a string",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_18868q0w6f().f[24]++;const result=(cov_18868q0w6f().s[83]++,toTwoDecimalPlaces(24.3));cov_18868q0w6f().s[84]++;assert.isString(result);",
              "err": {},
              "uuid": "66bf1626-75c9-4c0a-8836-32d595d31bc3",
              "parentUUID": "141e3494-4bd3-4c9c-a314-0e072c8bd998",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should append .00 if the number is an integer",
              "fullTitle": "the function to display a number to two decimal places should append .00 if the number is an integer",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_18868q0w6f().f[25]++;const result=(cov_18868q0w6f().s[86]++,toTwoDecimalPlaces(24));cov_18868q0w6f().s[87]++;assert.equal(result,'24.00');",
              "err": {},
              "uuid": "06155b7b-aea5-4192-8a98-00e389e42b81",
              "parentUUID": "141e3494-4bd3-4c9c-a314-0e072c8bd998",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should append a trailing zero if the number only has one decimal place",
              "fullTitle": "the function to display a number to two decimal places should append a trailing zero if the number only has one decimal place",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_18868q0w6f().f[26]++;const result=(cov_18868q0w6f().s[89]++,toTwoDecimalPlaces(24.3));cov_18868q0w6f().s[90]++;assert.equal(result,'24.30');",
              "err": {},
              "uuid": "9cc470e5-39a5-414f-8c9d-9a9f5872fc6d",
              "parentUUID": "141e3494-4bd3-4c9c-a314-0e072c8bd998",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should output the same number if the number has exactly two decimal places",
              "fullTitle": "the function to display a number to two decimal places should output the same number if the number has exactly two decimal places",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_18868q0w6f().f[27]++;const result=(cov_18868q0w6f().s[92]++,toTwoDecimalPlaces(24.32));cov_18868q0w6f().s[93]++;assert.equal(result,'24.32');",
              "err": {},
              "uuid": "206df524-8cf6-4982-98a1-e0bdfa59b567",
              "parentUUID": "141e3494-4bd3-4c9c-a314-0e072c8bd998",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should round the number to two decimal places if it has more than two decimal places",
              "fullTitle": "the function to display a number to two decimal places should round the number to two decimal places if it has more than two decimal places",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_18868q0w6f().f[28]++;const result=(cov_18868q0w6f().s[95]++,toTwoDecimalPlaces(24.336));cov_18868q0w6f().s[96]++;assert.equal(result,'24.34');",
              "err": {},
              "uuid": "381b7915-02dc-4c92-9fbe-d21b32aed66c",
              "parentUUID": "141e3494-4bd3-4c9c-a314-0e072c8bd998",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "66bf1626-75c9-4c0a-8836-32d595d31bc3",
            "06155b7b-aea5-4192-8a98-00e389e42b81",
            "9cc470e5-39a5-414f-8c9d-9a9f5872fc6d",
            "206df524-8cf6-4982-98a1-e0bdfa59b567",
            "381b7915-02dc-4c92-9fbe-d21b32aed66c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "129d3972-3ce4-4cb3-86d5-65c10039fd50",
          "title": "the function to create a tooltip when hovering over a specified button",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\general-util-test.js",
          "file": "\\test\\general-util-test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"the function to create a tooltip when hovering over a specified button\"",
              "fullTitle": "the function to create a tooltip when hovering over a specified button \"before each\" hook in \"the function to create a tooltip when hovering over a specified button\"",
              "timedOut": false,
              "duration": 39,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_18868q0w6f().f[30]++;const dom=(cov_18868q0w6f().s[99]++,new JSDOM(htmlDom,{url:'http://localhost'}));cov_18868q0w6f().s[100]++;global.window=dom.window;cov_18868q0w6f().s[101]++;global.document=dom.window.document;cov_18868q0w6f().s[102]++;global.$=global.jQuery=require('jquery');",
              "err": {},
              "uuid": "986bc91c-e5f2-4b7d-819c-0e5a14c56ab7",
              "parentUUID": "129d3972-3ce4-4cb3-86d5-65c10039fd50",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should set the data-bs-toggle attribute to tooltip",
              "fullTitle": "the function to create a tooltip when hovering over a specified button should set the data-bs-toggle attribute to tooltip",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_18868q0w6f().f[31]++;cov_18868q0w6f().s[104]++;$('#register').prop('disabled',false);cov_18868q0w6f().s[105]++;initializeTooltip($('#register'),'Hello');cov_18868q0w6f().s[106]++;assert.equal($('#register').attr('data-bs-toggle'),'tooltip');",
              "err": {},
              "uuid": "93766ff9-3af8-42c5-8c32-8cc2f23b38aa",
              "parentUUID": "129d3972-3ce4-4cb3-86d5-65c10039fd50",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should display the correct message",
              "fullTitle": "the function to create a tooltip when hovering over a specified button should display the correct message",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_18868q0w6f().f[32]++;cov_18868q0w6f().s[108]++;$('#register').prop('disabled',false);cov_18868q0w6f().s[109]++;initializeTooltip($('#register'),'Hello');cov_18868q0w6f().s[110]++;assert.equal($('#register').attr('title'),'Hello');",
              "err": {},
              "uuid": "7adaf62f-c0da-4e2e-b976-12b5369bcb20",
              "parentUUID": "129d3972-3ce4-4cb3-86d5-65c10039fd50",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "93766ff9-3af8-42c5-8c32-8cc2f23b38aa",
            "7adaf62f-c0da-4e2e-b976-12b5369bcb20"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "2842cb87-c59d-4a44-ac33-167b1164a4c9",
          "title": "the function to remove the tooltip anchored to a specified button",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\general-util-test.js",
          "file": "\\test\\general-util-test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"the function to remove the tooltip anchored to a specified button\"",
              "fullTitle": "the function to remove the tooltip anchored to a specified button \"before each\" hook in \"the function to remove the tooltip anchored to a specified button\"",
              "timedOut": false,
              "duration": 34,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_18868q0w6f().f[34]++;const dom=(cov_18868q0w6f().s[113]++,new JSDOM(htmlDom,{url:'http://localhost'}));cov_18868q0w6f().s[114]++;global.window=dom.window;cov_18868q0w6f().s[115]++;global.document=dom.window.document;cov_18868q0w6f().s[116]++;global.$=global.jQuery=require('jquery');",
              "err": {},
              "uuid": "0622bda8-5d09-433f-9ff3-7abdddffd154",
              "parentUUID": "2842cb87-c59d-4a44-ac33-167b1164a4c9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should not trigger any behavior associated with data toggling",
              "fullTitle": "the function to remove the tooltip anchored to a specified button should not trigger any behavior associated with data toggling",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_18868q0w6f().f[35]++;cov_18868q0w6f().s[118]++;$('#register').prop('disabled',false);cov_18868q0w6f().s[119]++;initializeTooltip($('#register'),'Hello');cov_18868q0w6f().s[120]++;removeTooltip($('#register'));cov_18868q0w6f().s[121]++;assert.equal(typeof $('#register').attr('data-bs-toggle'),'undefined');",
              "err": {},
              "uuid": "7ca02aa8-b07f-4536-861a-5d2c3878894c",
              "parentUUID": "2842cb87-c59d-4a44-ac33-167b1164a4c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not display any tooltip message",
              "fullTitle": "the function to remove the tooltip anchored to a specified button should not display any tooltip message",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_18868q0w6f().f[36]++;cov_18868q0w6f().s[123]++;$('#register').prop('disabled',false);cov_18868q0w6f().s[124]++;initializeTooltip($('#register'),'Hello');cov_18868q0w6f().s[125]++;removeTooltip($('#register'));cov_18868q0w6f().s[126]++;assert.equal(typeof $('#register').attr('title'),'undefined');",
              "err": {},
              "uuid": "027c79e8-2012-4483-9bfc-e3da84ad0af6",
              "parentUUID": "2842cb87-c59d-4a44-ac33-167b1164a4c9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7ca02aa8-b07f-4536-861a-5d2c3878894c",
            "027c79e8-2012-4483-9bfc-e3da84ad0af6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "a9dde232-2f1e-4fed-885b-af1fa331b3b4",
          "title": "the function to get the home page",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\home-controller-test.js",
          "file": "\\test\\home-controller-test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"the function to get the home page\"",
              "fullTitle": "the function to get the home page \"before each\" hook in \"the function to get the home page\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2iiod3isdm().f[1]++;cov_2iiod3isdm().s[10]++;res={render:sinon.spy(),redirect:sinon.spy()};",
              "err": {},
              "uuid": "4d51f143-dcb4-4bc2-a6a2-4d991499a8b4",
              "parentUUID": "a9dde232-2f1e-4fed-885b-af1fa331b3b4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should search the database for the selling prices only once",
              "fullTitle": "the function to get the home page should search the database for the selling prices only once",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2iiod3isdm().f[2]++;const req=(cov_2iiod3isdm().s[12]++,{session:{username:'bettina'}});const expectedResult=(cov_2iiod3isdm().s[13]++,{role:'inventory-manager',gasoline:'6.23',premiumGasoline95:'6.23',diesel:'6.23',premiumGasoline97:'6.23',kerosene:'6.23'});cov_2iiod3isdm().s[14]++;sinon.stub(db,'findOne').yields(expectedResult);cov_2iiod3isdm().s[15]++;homeController.getHome(req,res);cov_2iiod3isdm().s[16]++;assert.isTrue(db.findOne.calledOnce);cov_2iiod3isdm().s[17]++;db.findOne.restore();",
              "err": {},
              "uuid": "ad7cb974-e3f7-4c05-8ba9-dd268f9364dd",
              "parentUUID": "a9dde232-2f1e-4fed-885b-af1fa331b3b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should search the database for the selling prices with the correct arguments",
              "fullTitle": "the function to get the home page should search the database for the selling prices with the correct arguments",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2iiod3isdm().f[3]++;const req=(cov_2iiod3isdm().s[19]++,{session:{username:'bettina'}});const expectedResult=(cov_2iiod3isdm().s[20]++,{role:'inventory-manager',gasoline:'6.23',premiumGasoline95:'6.23',diesel:'6.23',premiumGasoline97:'6.23',kerosene:'6.23'});cov_2iiod3isdm().s[21]++;sinon.stub(db,'findOne').yields(expectedResult);cov_2iiod3isdm().s[22]++;homeController.getHome(req,res);cov_2iiod3isdm().s[23]++;assert.equal(db.findOne.firstCall.args[0],SellingPrice);cov_2iiod3isdm().s[24]++;expect(db.findOne.firstCall.args[1]).to.deep.equalInAnyOrder({label:'Prices'});cov_2iiod3isdm().s[25]++;assert.equal(db.findOne.firstCall.args[2],'gasoline premiumGasoline95 diesel premiumGasoline97 kerosene');cov_2iiod3isdm().s[26]++;db.findOne.restore();",
              "err": {},
              "uuid": "291abc4c-3890-44c4-b046-6116ff154993",
              "parentUUID": "a9dde232-2f1e-4fed-885b-af1fa331b3b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not redirect to the log-in page if the user is logged in",
              "fullTitle": "the function to get the home page should not redirect to the log-in page if the user is logged in",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2iiod3isdm().f[4]++;const req=(cov_2iiod3isdm().s[28]++,{session:{username:'bettina'}});cov_2iiod3isdm().s[29]++;homeController.getHome(req,res);cov_2iiod3isdm().s[30]++;assert.isTrue(res.redirect.notCalled);",
              "err": {},
              "uuid": "2e0e034d-7c67-4453-acc9-d31d72dae138",
              "parentUUID": "a9dde232-2f1e-4fed-885b-af1fa331b3b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should redirect to the next page only once if the user is not logged in",
              "fullTitle": "the function to get the home page should redirect to the next page only once if the user is not logged in",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2iiod3isdm().f[5]++;const req=(cov_2iiod3isdm().s[32]++,{session:{username:null}});cov_2iiod3isdm().s[33]++;homeController.getHome(req,res);cov_2iiod3isdm().s[34]++;assert.isTrue(res.redirect.calledOnce);",
              "err": {},
              "uuid": "74f453c7-6d45-450d-a12c-2846d29ffcf9",
              "parentUUID": "a9dde232-2f1e-4fed-885b-af1fa331b3b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should redirect to the log-in page if the user is not logged in",
              "fullTitle": "the function to get the home page should redirect to the log-in page if the user is not logged in",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2iiod3isdm().f[6]++;const req=(cov_2iiod3isdm().s[36]++,{session:{username:null}});cov_2iiod3isdm().s[37]++;homeController.getHome(req,res);cov_2iiod3isdm().s[38]++;assert.equal(res.redirect.firstCall.args[0],'/');",
              "err": {},
              "uuid": "3e1876ca-59e6-46a0-a533-bd2d2b3ea12a",
              "parentUUID": "a9dde232-2f1e-4fed-885b-af1fa331b3b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not render the home page if the user is not logged in",
              "fullTitle": "the function to get the home page should not render the home page if the user is not logged in",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2iiod3isdm().f[7]++;const req=(cov_2iiod3isdm().s[40]++,{session:{username:null}});cov_2iiod3isdm().s[41]++;homeController.getHome(req,res);cov_2iiod3isdm().s[42]++;assert.isTrue(res.render.notCalled);",
              "err": {},
              "uuid": "a6547112-159a-4550-96bf-27e741bb2941",
              "parentUUID": "a9dde232-2f1e-4fed-885b-af1fa331b3b4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ad7cb974-e3f7-4c05-8ba9-dd268f9364dd",
            "291abc4c-3890-44c4-b046-6116ff154993",
            "2e0e034d-7c67-4453-acc9-d31d72dae138",
            "74f453c7-6d45-450d-a12c-2846d29ffcf9",
            "3e1876ca-59e6-46a0-a533-bd2d2b3ea12a",
            "a6547112-159a-4550-96bf-27e741bb2941"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "b7002d5a-385b-477e-80e8-16374144afec",
          "title": "the function to edit the selling prices displayed on the home page",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\home-controller-test.js",
          "file": "\\test\\home-controller-test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"the function to edit the selling prices displayed on the home page\"",
              "fullTitle": "the function to edit the selling prices displayed on the home page \"before each\" hook in \"the function to edit the selling prices displayed on the home page\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2iiod3isdm().f[9]++;cov_2iiod3isdm().s[45]++;req={body:{editGasolinePrice:'67',editPremiumGasoline95Price:'78',editDieselPrice:'89',editPremiumGasoline97Price:'10',editKerosenePrice:'12'}};cov_2iiod3isdm().s[46]++;res={status:sinon.stub().returnsThis(),json:sinon.stub(),send:sinon.stub()};cov_2iiod3isdm().s[47]++;update={gasoline:req.body.editGasolinePrice,premiumGasoline95:req.body.editPremiumGasoline95Price,diesel:req.body.editDieselPrice,premiumGasoline97:req.body.editPremiumGasoline97Price,kerosene:req.body.editKerosenePrice};",
              "err": {},
              "uuid": "3ff12726-3c9b-47e1-96ab-ea3bd1116bdd",
              "parentUUID": "b7002d5a-385b-477e-80e8-16374144afec",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should update the database with the correct prices only once",
              "fullTitle": "the function to edit the selling prices displayed on the home page should update the database with the correct prices only once",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2iiod3isdm().f[10]++;cov_2iiod3isdm().s[49]++;sinon.stub(db,'updateOne').yields({});cov_2iiod3isdm().s[50]++;homeController.postEditPrices(req,res);cov_2iiod3isdm().s[51]++;assert.isTrue(db.updateOne.calledOnce);cov_2iiod3isdm().s[52]++;db.updateOne.restore();",
              "err": {},
              "uuid": "db53e05a-bde0-434a-b37f-6416f8748052",
              "parentUUID": "b7002d5a-385b-477e-80e8-16374144afec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update the database with the correct prices with the correct arguments",
              "fullTitle": "the function to edit the selling prices displayed on the home page should update the database with the correct prices with the correct arguments",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2iiod3isdm().f[11]++;cov_2iiod3isdm().s[54]++;sinon.stub(db,'updateOne').yields({});cov_2iiod3isdm().s[55]++;homeController.postEditPrices(req,res);cov_2iiod3isdm().s[56]++;assert.equal(db.updateOne.firstCall.args[0],SellingPrice);cov_2iiod3isdm().s[57]++;expect(db.updateOne.firstCall.args[1]).to.deep.equalInAnyOrder({label:'Prices'});cov_2iiod3isdm().s[58]++;expect(db.updateOne.firstCall.args[2]).to.deep.equalInAnyOrder(update);cov_2iiod3isdm().s[59]++;db.updateOne.restore();",
              "err": {},
              "uuid": "369349e3-f5d2-4b64-a2ff-683fb42c41a5",
              "parentUUID": "b7002d5a-385b-477e-80e8-16374144afec",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "db53e05a-bde0-434a-b37f-6416f8748052",
            "369349e3-f5d2-4b64-a2ff-683fb42c41a5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "ddffd1af-a2f1-488c-b5d0-d7ea4fff7f30",
          "title": "the function to check if a role has the privilege to edit inventory prices",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\home-util-test.js",
          "file": "\\test\\home-util-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return a Boolean value",
              "fullTitle": "the function to check if a role has the privilege to edit inventory prices should return a Boolean value",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2jtna17fpt().f[1]++;const result=(cov_2jtna17fpt().s[8]++,isAllowedToEdit('administrator'));cov_2jtna17fpt().s[9]++;assert.isBoolean(result);",
              "err": {},
              "uuid": "a8511310-7505-4321-a3e2-c1778eb75bba",
              "parentUUID": "ddffd1af-a2f1-488c-b5d0-d7ea4fff7f30",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true if the role is administrator",
              "fullTitle": "the function to check if a role has the privilege to edit inventory prices should return true if the role is administrator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2jtna17fpt().f[2]++;const result=(cov_2jtna17fpt().s[11]++,isAllowedToEdit('administrator'));cov_2jtna17fpt().s[12]++;assert.isTrue(result);",
              "err": {},
              "uuid": "2ab90850-6e85-463c-94dc-c14490dd2bbc",
              "parentUUID": "ddffd1af-a2f1-488c-b5d0-d7ea4fff7f30",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true if the role is inventory manager",
              "fullTitle": "the function to check if a role has the privilege to edit inventory prices should return true if the role is inventory manager",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2jtna17fpt().f[3]++;const result=(cov_2jtna17fpt().s[14]++,isAllowedToEdit('inventory-manager'));cov_2jtna17fpt().s[15]++;assert.isTrue(result);",
              "err": {},
              "uuid": "602ff5a0-f5c4-4d17-a84d-98572ce35d31",
              "parentUUID": "ddffd1af-a2f1-488c-b5d0-d7ea4fff7f30",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if the role is transaction cashier",
              "fullTitle": "the function to check if a role has the privilege to edit inventory prices should return false if the role is transaction cashier",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2jtna17fpt().f[4]++;const result=(cov_2jtna17fpt().s[17]++,isAllowedToEdit('transaction-cashier'));cov_2jtna17fpt().s[18]++;assert.isFalse(result);",
              "err": {},
              "uuid": "3b7e721c-7ee7-444a-aa8a-035e0548266a",
              "parentUUID": "ddffd1af-a2f1-488c-b5d0-d7ea4fff7f30",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if the role is delivery manager",
              "fullTitle": "the function to check if a role has the privilege to edit inventory prices should return false if the role is delivery manager",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2jtna17fpt().f[5]++;const result=(cov_2jtna17fpt().s[20]++,isAllowedToEdit('delivery-manager'));cov_2jtna17fpt().s[21]++;assert.isFalse(result);",
              "err": {},
              "uuid": "d5a0d45b-3639-48a7-9a25-6dac8ed16bce",
              "parentUUID": "ddffd1af-a2f1-488c-b5d0-d7ea4fff7f30",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a8511310-7505-4321-a3e2-c1778eb75bba",
            "2ab90850-6e85-463c-94dc-c14490dd2bbc",
            "602ff5a0-f5c4-4d17-a84d-98572ce35d31",
            "3b7e721c-7ee7-444a-aa8a-035e0548266a",
            "d5a0d45b-3639-48a7-9a25-6dac8ed16bce"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "8ae0fe4b-564f-4715-af82-2c900ec96262",
          "title": "the function to update the prices displayed on the home page (front-end only)",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\home-util-test.js",
          "file": "\\test\\home-util-test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"the function to update the prices displayed on the home page (front-end only)\"",
              "fullTitle": "the function to update the prices displayed on the home page (front-end only) \"before each\" hook in \"the function to update the prices displayed on the home page (front-end only)\"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2jtna17fpt().f[7]++;const dom=(cov_2jtna17fpt().s[24]++,new JSDOM(htmlDom,{url:'http://localhost'}));cov_2jtna17fpt().s[25]++;global.window=dom.window;cov_2jtna17fpt().s[26]++;global.document=dom.window.document;cov_2jtna17fpt().s[27]++;global.$=global.jQuery=require('jquery');",
              "err": {},
              "uuid": "ffd65cb1-59b2-4dbd-9bea-cfe8aaba3b0f",
              "parentUUID": "8ae0fe4b-564f-4715-af82-2c900ec96262",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should reflect the correct prices on the home page",
              "fullTitle": "the function to update the prices displayed on the home page (front-end only) should reflect the correct prices on the home page",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2jtna17fpt().f[8]++;cov_2jtna17fpt().s[29]++;updatePrices();cov_2jtna17fpt().s[30]++;assert.equal($('#gasoline-price').text(),'3.11');cov_2jtna17fpt().s[31]++;assert.equal($('#premium-gasoline-95-price').text(),'3.12');cov_2jtna17fpt().s[32]++;assert.equal($('#diesel-price').text(),'3.13');cov_2jtna17fpt().s[33]++;assert.equal($('#premium-gasoline-97-price').text(),'3.14');cov_2jtna17fpt().s[34]++;assert.equal($('#kerosene-price').text(),'3.15');",
              "err": {},
              "uuid": "87c00663-f30b-4f6c-9c35-7d900e619f11",
              "parentUUID": "8ae0fe4b-564f-4715-af82-2c900ec96262",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "87c00663-f30b-4f6c-9c35-7d900e619f11"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "29c7248c-37bc-423e-a756-74ba4ed9a73b",
          "title": "the function to get the inventory page",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\inventory-controller-test.js",
          "file": "\\test\\inventory-controller-test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"the function to get the inventory page\"",
              "fullTitle": "the function to get the inventory page \"before each\" hook in \"the function to get the inventory page\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_ykophxn7u().f[1]++;cov_ykophxn7u().s[10]++;req={session:{role:'administrator'}};cov_ykophxn7u().s[11]++;res={status:sinon.stub().returnsThis(),json:sinon.stub(),send:sinon.stub(),render:sinon.spy()};cov_ykophxn7u().s[12]++;expectedResult=[{_id:'01234',type:'Diesel',date:'01-06-2022',supplier:'Chevron',price:'67.83',quantity:'1200'},{_id:'012234',type:'Kerosene',date:'01-06-2022',supplier:'Rhombus',price:'61.83',quantity:'200'}];",
              "err": {},
              "uuid": "b4bf5c6f-9cb7-430e-8885-dadc6478c1ef",
              "parentUUID": "29c7248c-37bc-423e-a756-74ba4ed9a73b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should retrieve the details of all the inventory purchases only once",
              "fullTitle": "the function to get the inventory page should retrieve the details of all the inventory purchases only once",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_ykophxn7u().f[2]++;cov_ykophxn7u().s[14]++;sinon.stub(db,'findMany').yields(expectedResult);cov_ykophxn7u().s[15]++;inventoryController.getInventory(req,res);cov_ykophxn7u().s[16]++;assert.isTrue(db.findMany.calledOnce);cov_ykophxn7u().s[17]++;db.findMany.restore();",
              "err": {},
              "uuid": "58c15590-6a6e-4ea9-b03c-ecb5ff5cf0d3",
              "parentUUID": "29c7248c-37bc-423e-a756-74ba4ed9a73b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve the details of all the inventory purchases with the correct arguments",
              "fullTitle": "the function to get the inventory page should retrieve the details of all the inventory purchases with the correct arguments",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_ykophxn7u().f[3]++;cov_ykophxn7u().s[19]++;sinon.stub(db,'findMany').yields(expectedResult);cov_ykophxn7u().s[20]++;inventoryController.getInventory(req,res);cov_ykophxn7u().s[21]++;assert.equal(db.findMany.firstCall.args[0],Inventory);cov_ykophxn7u().s[22]++;expect(db.findMany.firstCall.args[1]).to.deep.equalInAnyOrder({});cov_ykophxn7u().s[23]++;assert.equal(db.findMany.firstCall.args[2],'_id type date supplier price quantityPurchased quantityDepleted');cov_ykophxn7u().s[24]++;db.findMany.restore();",
              "err": {},
              "uuid": "f33e334f-6c18-462e-8cb0-cf3a8e647a79",
              "parentUUID": "29c7248c-37bc-423e-a756-74ba4ed9a73b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "58c15590-6a6e-4ea9-b03c-ecb5ff5cf0d3",
            "f33e334f-6c18-462e-8cb0-cf3a8e647a79"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "6a484508-06e7-4625-9493-9c8a53f6f73c",
          "title": "the function to get the page displaying more information for a particular stock",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\inventory-controller-test.js",
          "file": "\\test\\inventory-controller-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should retrieve the information for the stock only once",
              "fullTitle": "the function to get the page displaying more information for a particular stock should retrieve the information for the stock only once",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_ykophxn7u().f[5]++;const req=(cov_ykophxn7u().s[27]++,{params:{id:'1234'}});const res=(cov_ykophxn7u().s[28]++,{status:sinon.stub().returnsThis(),json:sinon.stub(),send:sinon.stub()});const expectedResult=(cov_ykophxn7u().s[29]++,{_id:'01234',type:'Diesel',supplier:'Chevron',location:'Manila',quantity:'1200',price:'67.83',date:'01-06-2022'});const convertToObjectId=(cov_ykophxn7u().s[30]++,sinon.stub(db,'convertToObjectId'));cov_ykophxn7u().s[31]++;convertToObjectId.returns('123');cov_ykophxn7u().s[32]++;sinon.stub(db,'findOne').yields(expectedResult);cov_ykophxn7u().s[33]++;inventoryController.getMoreInfoStock(req,res);cov_ykophxn7u().s[34]++;assert.isTrue(db.findOne.calledOnce);cov_ykophxn7u().s[35]++;db.convertToObjectId.restore();cov_ykophxn7u().s[36]++;db.findOne.restore();",
              "err": {},
              "uuid": "e6df8b18-3e37-4511-8460-1d936e86b780",
              "parentUUID": "6a484508-06e7-4625-9493-9c8a53f6f73c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve the information for the stock with the correct arguments",
              "fullTitle": "the function to get the page displaying more information for a particular stock should retrieve the information for the stock with the correct arguments",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_ykophxn7u().f[6]++;const req=(cov_ykophxn7u().s[38]++,{params:{id:'1234'}});const res=(cov_ykophxn7u().s[39]++,{status:sinon.stub().returnsThis(),json:sinon.stub(),send:sinon.stub()});const expectedResult=(cov_ykophxn7u().s[40]++,{_id:'01234',type:'Diesel',supplier:'Chevron',location:'Manila',quantity:'1200',price:'67.83',date:'01-06-2022'});const convertToObjectId=(cov_ykophxn7u().s[41]++,sinon.stub(db,'convertToObjectId'));cov_ykophxn7u().s[42]++;convertToObjectId.returns('123');const filter=(cov_ykophxn7u().s[43]++,{_id:convertToObjectId('123')});cov_ykophxn7u().s[44]++;sinon.stub(db,'findOne').yields(expectedResult);cov_ykophxn7u().s[45]++;inventoryController.getMoreInfoStock(req,res);cov_ykophxn7u().s[46]++;assert.equal(db.findOne.firstCall.args[0],Inventory);cov_ykophxn7u().s[47]++;expect(db.findOne.firstCall.args[1]).to.deep.equalInAnyOrder(filter);cov_ykophxn7u().s[48]++;assert.equal(db.findOne.firstCall.args[2],'type supplier location quantityPurchased quantityDepleted price date');cov_ykophxn7u().s[49]++;db.convertToObjectId.restore();cov_ykophxn7u().s[50]++;db.findOne.restore();",
              "err": {},
              "uuid": "d57cfcad-c7d1-478a-93e7-0867b95447a2",
              "parentUUID": "6a484508-06e7-4625-9493-9c8a53f6f73c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e6df8b18-3e37-4511-8460-1d936e86b780",
            "d57cfcad-c7d1-478a-93e7-0867b95447a2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "d45f054d-08a5-44c2-9549-1ddbdef271e0",
          "title": "the function to get the page for editing information on a particular stock",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\inventory-controller-test.js",
          "file": "\\test\\inventory-controller-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should retrieve the information for the stock only once",
              "fullTitle": "the function to get the page for editing information on a particular stock should retrieve the information for the stock only once",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_ykophxn7u().f[8]++;const req=(cov_ykophxn7u().s[53]++,{params:{id:'1234'}});const res=(cov_ykophxn7u().s[54]++,{status:sinon.stub().returnsThis(),json:sinon.stub(),send:sinon.stub()});const expectedResult=(cov_ykophxn7u().s[55]++,{_id:'01234',type:'Diesel',supplier:'Chevron',location:'Manila',quantity:'1200',price:'67.83',date:'01-06-2022'});const convertToObjectId=(cov_ykophxn7u().s[56]++,sinon.stub(db,'convertToObjectId'));cov_ykophxn7u().s[57]++;convertToObjectId.returns('123');cov_ykophxn7u().s[58]++;sinon.stub(db,'findOne').yields(expectedResult);cov_ykophxn7u().s[59]++;inventoryController.getEditStock(req,res);cov_ykophxn7u().s[60]++;assert.isTrue(db.findOne.calledOnce);cov_ykophxn7u().s[61]++;db.convertToObjectId.restore();cov_ykophxn7u().s[62]++;db.findOne.restore();",
              "err": {},
              "uuid": "ca67453c-f3b5-4a8d-b265-8fcbfc01a1da",
              "parentUUID": "d45f054d-08a5-44c2-9549-1ddbdef271e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve the information for the stock with the correct arguments",
              "fullTitle": "the function to get the page for editing information on a particular stock should retrieve the information for the stock with the correct arguments",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_ykophxn7u().f[9]++;const req=(cov_ykophxn7u().s[64]++,{params:{id:'1234'}});const res=(cov_ykophxn7u().s[65]++,{status:sinon.stub().returnsThis(),json:sinon.stub(),send:sinon.stub()});const expectedResult=(cov_ykophxn7u().s[66]++,{_id:'01234',type:'Diesel',supplier:'Chevron',location:'Manila',quantity:'1200',price:'67.83',date:'01-06-2022'});const convertToObjectId=(cov_ykophxn7u().s[67]++,sinon.stub(db,'convertToObjectId'));cov_ykophxn7u().s[68]++;convertToObjectId.returns('123');const filter=(cov_ykophxn7u().s[69]++,{_id:convertToObjectId('123')});cov_ykophxn7u().s[70]++;sinon.stub(db,'findOne').yields(expectedResult);cov_ykophxn7u().s[71]++;inventoryController.getEditStock(req,res);cov_ykophxn7u().s[72]++;assert.equal(db.findOne.firstCall.args[0],Inventory);cov_ykophxn7u().s[73]++;expect(db.findOne.firstCall.args[1]).to.deep.equalInAnyOrder(filter);cov_ykophxn7u().s[74]++;assert.equal(db.findOne.firstCall.args[2],'type supplier location quantityPurchased quantityDepleted price date');cov_ykophxn7u().s[75]++;db.convertToObjectId.restore();cov_ykophxn7u().s[76]++;db.findOne.restore();",
              "err": {},
              "uuid": "ab33eb3a-15b7-4774-accf-ed9467eb3760",
              "parentUUID": "d45f054d-08a5-44c2-9549-1ddbdef271e0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ca67453c-f3b5-4a8d-b265-8fcbfc01a1da",
            "ab33eb3a-15b7-4774-accf-ed9467eb3760"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "b239dd02-915a-49d8-87ca-7e6c00efec45",
          "title": "the function to register the details of a particular stock",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\inventory-controller-test.js",
          "file": "\\test\\inventory-controller-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should retrieve the information for the stock only once",
              "fullTitle": "the function to register the details of a particular stock should retrieve the information for the stock only once",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_ykophxn7u().f[11]++;const req=(cov_ykophxn7u().s[79]++,{body:{editStockId:'1234',editStockName:'Diesel',editStockSupplier:'Chevron',editStockStorage:'Masangkay',editStockQuantityPurchased:'1234',editStockQuantityDepleted:'1000',editStockPricePurchased:'45.3',editStockDatePurchased:'05-06-2022'}});const res=(cov_ykophxn7u().s[80]++,{status:sinon.stub().returnsThis(),json:sinon.stub(),send:sinon.stub()});const convertToObjectId=(cov_ykophxn7u().s[81]++,sinon.stub(db,'convertToObjectId'));cov_ykophxn7u().s[82]++;convertToObjectId.returns('123');cov_ykophxn7u().s[83]++;sinon.stub(db,'updateOne').yields({});cov_ykophxn7u().s[84]++;inventoryController.postEditStock(req,res);cov_ykophxn7u().s[85]++;assert.isTrue(db.updateOne.calledOnce);cov_ykophxn7u().s[86]++;db.convertToObjectId.restore();cov_ykophxn7u().s[87]++;db.updateOne.restore();",
              "err": {},
              "uuid": "59e4d341-9443-49eb-8771-dd5a83e4b7c0",
              "parentUUID": "b239dd02-915a-49d8-87ca-7e6c00efec45",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve the information for the stock with the correct arguments",
              "fullTitle": "the function to register the details of a particular stock should retrieve the information for the stock with the correct arguments",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_ykophxn7u().f[12]++;const req=(cov_ykophxn7u().s[89]++,{body:{editStockId:'1234',editStockName:'Diesel',editStockSupplier:'Chevron',editStockStorage:'Masangkay',editStockQuantityPurchased:'1234',editStockQuantityDepleted:'1000',editStockPricePurchased:'45.3',editStockDatePurchased:'05-06-2022'}});const res=(cov_ykophxn7u().s[90]++,{status:sinon.stub().returnsThis(),json:sinon.stub(),send:sinon.stub()});const convertToObjectId=(cov_ykophxn7u().s[91]++,sinon.stub(db,'convertToObjectId'));cov_ykophxn7u().s[92]++;convertToObjectId.returns('123');const filter=(cov_ykophxn7u().s[93]++,{_id:convertToObjectId('123')});const update=(cov_ykophxn7u().s[94]++,{type:req.body.editStockName.trim(),supplier:req.body.editStockSupplier.trim(),location:req.body.editStockStorage.trim(),quantityPurchased:req.body.editStockQuantityPurchased,price:req.body.editStockPricePurchased,date:req.body.editStockDatePurchased});cov_ykophxn7u().s[95]++;sinon.stub(db,'updateOne').yields({});cov_ykophxn7u().s[96]++;inventoryController.postEditStock(req,res);cov_ykophxn7u().s[97]++;assert.equal(db.updateOne.firstCall.args[0],Inventory);cov_ykophxn7u().s[98]++;expect(db.updateOne.firstCall.args[1]).to.deep.equalInAnyOrder(filter);cov_ykophxn7u().s[99]++;expect(db.updateOne.firstCall.args[2]).to.deep.equalInAnyOrder(update);cov_ykophxn7u().s[100]++;db.convertToObjectId.restore();cov_ykophxn7u().s[101]++;db.updateOne.restore();",
              "err": {},
              "uuid": "7624f3ff-6577-4b03-a1dd-70b45eac3e6c",
              "parentUUID": "b239dd02-915a-49d8-87ca-7e6c00efec45",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "59e4d341-9443-49eb-8771-dd5a83e4b7c0",
            "7624f3ff-6577-4b03-a1dd-70b45eac3e6c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 26,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "ccb77a94-3c04-4191-9fc8-0afa33f4c82f",
          "title": "the function to get the page for adding a new stock",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\inventory-controller-test.js",
          "file": "\\test\\inventory-controller-test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"the function to get the page for adding a new stock\"",
              "fullTitle": "the function to get the page for adding a new stock \"before each\" hook in \"the function to get the page for adding a new stock\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_ykophxn7u().f[14]++;cov_ykophxn7u().s[104]++;req=sinon.spy();cov_ykophxn7u().s[105]++;res={render:sinon.spy()};",
              "err": {},
              "uuid": "cafe94ec-d134-4e63-8763-b32e5e8b8216",
              "parentUUID": "ccb77a94-3c04-4191-9fc8-0afa33f4c82f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render the page only once",
              "fullTitle": "the function to get the page for adding a new stock should render the page only once",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_ykophxn7u().f[15]++;cov_ykophxn7u().s[107]++;inventoryController.getAddStock(req,res);cov_ykophxn7u().s[108]++;assert.isTrue(res.render.calledOnce);",
              "err": {},
              "uuid": "8c419918-6473-47fd-8acd-34ce642204be",
              "parentUUID": "ccb77a94-3c04-4191-9fc8-0afa33f4c82f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render the page for adding a new stock",
              "fullTitle": "the function to get the page for adding a new stock should render the page for adding a new stock",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_ykophxn7u().f[16]++;cov_ykophxn7u().s[110]++;inventoryController.getAddStock(req,res);cov_ykophxn7u().s[111]++;assert.equal(res.render.firstCall.args[0],'add-stock');",
              "err": {},
              "uuid": "52149ce2-8273-467d-a488-6800c4135321",
              "parentUUID": "ccb77a94-3c04-4191-9fc8-0afa33f4c82f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8c419918-6473-47fd-8acd-34ce642204be",
            "52149ce2-8273-467d-a488-6800c4135321"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "4e9ef8c1-98ed-4e03-9e09-ccc6d9a7690c",
          "title": "the function to add a new stock",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\inventory-controller-test.js",
          "file": "\\test\\inventory-controller-test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"the function to add a new stock\"",
              "fullTitle": "the function to add a new stock \"before each\" hook in \"the function to add a new stock\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_ykophxn7u().f[18]++;cov_ykophxn7u().s[114]++;req={body:{addStockName:'Diesel',addStockSupplier:'Chevron',addStockStorage:'Masangkay',addStockQuantityPurchased:'1234',addStockQuantityDepleted:'1000',addStockPricePurchased:'45.3',addStockDatePurchased:'05-06-2022'}};cov_ykophxn7u().s[115]++;res={status:sinon.stub().returnsThis(),json:sinon.stub(),send:sinon.stub()};",
              "err": {},
              "uuid": "e8774cc9-4332-465d-acaf-5c88d8dad795",
              "parentUUID": "4e9ef8c1-98ed-4e03-9e09-ccc6d9a7690c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should insert the new stock only once",
              "fullTitle": "the function to add a new stock should insert the new stock only once",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_ykophxn7u().f[19]++;cov_ykophxn7u().s[117]++;sinon.stub(db,'insertOne').yields({});cov_ykophxn7u().s[118]++;inventoryController.postAddStock(req,res);cov_ykophxn7u().s[119]++;assert.isTrue(db.insertOne.calledOnce);cov_ykophxn7u().s[120]++;db.insertOne.restore();",
              "err": {},
              "uuid": "33006987-0e3a-45b7-9683-b074cec3f7f7",
              "parentUUID": "4e9ef8c1-98ed-4e03-9e09-ccc6d9a7690c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should insert the new stock with the correct arguments",
              "fullTitle": "the function to add a new stock should insert the new stock with the correct arguments",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_ykophxn7u().f[20]++;const purchase=(cov_ykophxn7u().s[122]++,{type:req.body.addStockName.trim(),supplier:req.body.addStockSupplier.trim(),location:req.body.addStockStorage.trim(),quantityDepleted:0,quantityPurchased:req.body.addStockQuantityPurchased,price:req.body.addStockPricePurchased,date:req.body.addStockDatePurchased});cov_ykophxn7u().s[123]++;sinon.stub(db,'insertOne').yields({});cov_ykophxn7u().s[124]++;inventoryController.postAddStock(req,res);cov_ykophxn7u().s[125]++;assert.equal(db.insertOne.firstCall.args[0],Inventory);cov_ykophxn7u().s[126]++;expect(db.insertOne.firstCall.args[1]).to.deep.equalInAnyOrder(purchase);cov_ykophxn7u().s[127]++;db.insertOne.restore();",
              "err": {},
              "uuid": "03651ab0-1411-4607-b729-7ff14dda9dd0",
              "parentUUID": "4e9ef8c1-98ed-4e03-9e09-ccc6d9a7690c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "33006987-0e3a-45b7-9683-b074cec3f7f7",
            "03651ab0-1411-4607-b729-7ff14dda9dd0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "4ba368a4-f9a4-44ae-b10a-d47bfd100255",
          "title": "the function to organizing the details across all the inventory items",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\inventory-controller-util-test.js",
          "file": "\\test\\inventory-controller-util-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should include the correct details of the inventory items if the dates contain single-digit components",
              "fullTitle": "the function to organizing the details across all the inventory items should include the correct details of the inventory items if the dates contain single-digit components",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1j9e0zp142().f[1]++;const dbResult=(cov_1j9e0zp142().s[6]++,[{_id:'123',type:'gasoline',supplier:'boop',price:'651',location:'manila',quantityPurchased:'57',quantityDepleted:'40',date:new Date(2002,1,1)},{_id:'124',type:'premium-gasoline-95',supplier:'boop1',price:'652',location:'manila1',quantityPurchased:'57',quantityDepleted:'40',date:new Date(2002,1,2)},{_id:'125',type:'premium-gasoline-97',supplier:'boop2',price:'653',location:'manila2',quantityPurchased:'57',quantityDepleted:'40',date:new Date(2002,1,3)},{_id:'126',type:'kerosene',supplier:'boop3',price:'654',location:'manila3',quantityPurchased:'57',quantityDepleted:'40',date:new Date(2002,1,11)},{_id:'127',type:'diesel',supplier:'boop4',price:'655',location:'manila4',quantityPurchased:'57',quantityDepleted:'40',date:new Date(2002,1,13)}]);const expectedResult=(cov_1j9e0zp142().s[7]++,{'dates':['02/01/2002','02/02/2002','02/03/2002','02/11/2002','02/13/2002'],'ids':['123','124','125','126','127'],'locations':['manila','manila1','manila2','manila3','manila4'],'prices':['651','652','653','654','655'],'statuses':['In Stock','In Stock','In Stock','In Stock','In Stock'],'suppliers':['boop','boop1','boop2','boop3','boop4'],'totalDiesel':17,'totalGasoline':17,'totalKerosene':17,'totalPremiumGasoline95':17,'totalPremiumGasoline97':17,'types':['diesel','gasoline','kerosene','premium-gasoline-95','premium-gasoline-97']});const result=(cov_1j9e0zp142().s[8]++,inventoryControllerUtil.inventoryUtil(dbResult));cov_1j9e0zp142().s[9]++;expect(result).to.deep.equalInAnyOrder(expectedResult);",
              "err": {},
              "uuid": "e863fd18-5e70-43ac-b760-ad52df18edbe",
              "parentUUID": "4ba368a4-f9a4-44ae-b10a-d47bfd100255",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should include the correct details of the inventory items if the dates do not contain single-digit components",
              "fullTitle": "the function to organizing the details across all the inventory items should include the correct details of the inventory items if the dates do not contain single-digit components",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1j9e0zp142().f[2]++;const dbResult=(cov_1j9e0zp142().s[11]++,[{_id:'123',type:'gasoline',supplier:'boop',price:'651',location:'manila',quantityPurchased:'57',quantityDepleted:'40',date:new Date(2002,11,21)},{_id:'124',type:'premium-gasoline-95',supplier:'boop1',price:'652',location:'manila1',quantityPurchased:'57',quantityDepleted:'40',date:new Date(2002,11,22)},{_id:'125',type:'premium-gasoline-97',supplier:'boop2',price:'653',location:'manila2',quantityPurchased:'57',quantityDepleted:'40',date:new Date(2002,11,13)},{_id:'126',type:'kerosene',supplier:'boop3',price:'654',location:'manila3',quantityPurchased:'57',quantityDepleted:'40',date:new Date(2002,11,11)},{_id:'127',type:'diesel',supplier:'boop4',price:'655',location:'manila4',quantityPurchased:'57',quantityDepleted:'40',date:new Date(2002,11,13)}]);const expectedResult=(cov_1j9e0zp142().s[12]++,{'dates':['12/22/2002','12/13/2002','12/21/2002','12/11/2002','12/13/2002'],'ids':['123','124','125','126','127'],'locations':['manila','manila1','manila2','manila3','manila4'],'prices':['651','652','653','654','655'],'statuses':['In Stock','In Stock','In Stock','In Stock','In Stock'],'suppliers':['boop','boop1','boop2','boop3','boop4'],'totalDiesel':17,'totalGasoline':17,'totalKerosene':17,'totalPremiumGasoline95':17,'totalPremiumGasoline97':17,'types':['diesel','gasoline','kerosene','premium-gasoline-95','premium-gasoline-97']});const result=(cov_1j9e0zp142().s[13]++,inventoryControllerUtil.inventoryUtil(dbResult));cov_1j9e0zp142().s[14]++;expect(result).to.deep.equalInAnyOrder(expectedResult);",
              "err": {},
              "uuid": "4d872a6f-5268-4972-94a9-71d33ca18da7",
              "parentUUID": "4ba368a4-f9a4-44ae-b10a-d47bfd100255",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should exclude inventory items where depleted quantities exceed the purchased quantities",
              "fullTitle": "the function to organizing the details across all the inventory items should exclude inventory items where depleted quantities exceed the purchased quantities",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1j9e0zp142().f[3]++;const dbResult=(cov_1j9e0zp142().s[16]++,[{_id:'123',type:'gasoline',supplier:'boop',price:'651',location:'manila',quantityPurchased:'47',quantityDepleted:'50',date:new Date(2002,11,21)},{_id:'124',type:'premium-gasoline-95',supplier:'boop1',price:'652',location:'manila1',quantityPurchased:'47',quantityDepleted:'50',date:new Date(2002,11,22)},{_id:'125',type:'premium-gasoline-97',supplier:'boop2',price:'653',location:'manila2',quantityPurchased:'47',quantityDepleted:'50',date:new Date(2002,11,13)},{_id:'126',type:'kerosene',supplier:'boop3',price:'654',location:'manila3',quantityPurchased:'57',quantityDepleted:'40',date:new Date(2002,11,11)},{_id:'127',type:'diesel',supplier:'boop4',price:'655',location:'manila4',quantityPurchased:'57',quantityDepleted:'40',date:new Date(2002,11,13)}]);const expectedResult=(cov_1j9e0zp142().s[17]++,{'dates':['12/11/2002','12/13/2002'],'ids':['126','127'],'locations':['manila3','manila4'],'prices':['654','655'],'statuses':['In Stock','In Stock'],'suppliers':['boop3','boop4'],'totalDiesel':17,'totalGasoline':0,'totalKerosene':17,'totalPremiumGasoline95':0,'totalPremiumGasoline97':0,'types':['diesel','kerosene']});const result=(cov_1j9e0zp142().s[18]++,inventoryControllerUtil.inventoryUtil(dbResult));cov_1j9e0zp142().s[19]++;expect(result).to.deep.equalInAnyOrder(expectedResult);",
              "err": {},
              "uuid": "caad3944-dc05-43b4-9512-2ef6af64e515",
              "parentUUID": "4ba368a4-f9a4-44ae-b10a-d47bfd100255",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e863fd18-5e70-43ac-b760-ad52df18edbe",
            "4d872a6f-5268-4972-94a9-71d33ca18da7",
            "caad3944-dc05-43b4-9512-2ef6af64e515"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "73b117e9-5bd1-4740-b835-790634c383c4",
          "title": "the function to show all the rows of a table",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\inventory-util-test.js",
          "file": "\\test\\inventory-util-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should make all the rows visible",
              "fullTitle": "the function to show all the rows of a table should make all the rows visible",
              "timedOut": false,
              "duration": 156,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1n55oadvbo().f[1]++;const dom=(cov_1n55oadvbo().s[8]++,new JSDOM(htmlDom,{url:'http://localhost'}));cov_1n55oadvbo().s[9]++;global.window=dom.window;cov_1n55oadvbo().s[10]++;global.document=dom.window.document;cov_1n55oadvbo().s[11]++;global.$=global.jQuery=require('jquery');cov_1n55oadvbo().s[12]++;$('tr').hide();cov_1n55oadvbo().s[13]++;showAll('tbl');cov_1n55oadvbo().s[14]++;$('tr').each(function(){cov_1n55oadvbo().f[2]++;cov_1n55oadvbo().s[15]++;assert.equal($(this).css('visibility'),'visible');});",
              "err": {},
              "uuid": "a90df4ba-646e-419e-b41d-8ae37f281eef",
              "parentUUID": "73b117e9-5bd1-4740-b835-790634c383c4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a90df4ba-646e-419e-b41d-8ae37f281eef"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 156,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "97ee9880-a0f5-4a8a-960f-7861fe3fbd27",
          "title": "the function to filter the rows of the table based on the fuel type and date",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\inventory-util-test.js",
          "file": "\\test\\inventory-util-test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"the function to filter the rows of the table based on the fuel type and date\"",
              "fullTitle": "the function to filter the rows of the table based on the fuel type and date \"before each\" hook in \"the function to filter the rows of the table based on the fuel type and date\"",
              "timedOut": false,
              "duration": 15,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1n55oadvbo().f[4]++;const dom=(cov_1n55oadvbo().s[18]++,new JSDOM(htmlDom,{url:'http://localhost'}));cov_1n55oadvbo().s[19]++;global.window=dom.window;cov_1n55oadvbo().s[20]++;global.document=dom.window.document;cov_1n55oadvbo().s[21]++;global.$=global.jQuery=require('jquery');",
              "err": {},
              "uuid": "cb56b123-0b32-4bb2-b5a0-b181c94dc964",
              "parentUUID": "97ee9880-a0f5-4a8a-960f-7861fe3fbd27",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should show all the rows when no fuel types and no date are specified",
              "fullTitle": "the function to filter the rows of the table based on the fuel type and date should show all the rows when no fuel types and no date are specified",
              "timedOut": false,
              "duration": 36,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1n55oadvbo().f[5]++;cov_1n55oadvbo().s[23]++;filterBy('tbl',[],'');cov_1n55oadvbo().s[24]++;$('tr').each(function(){cov_1n55oadvbo().f[6]++;cov_1n55oadvbo().s[25]++;assert.equal($(this).css('visibility'),'visible');});",
              "err": {},
              "uuid": "d6485420-378f-4152-b9f5-37a3193b1dce",
              "parentUUID": "97ee9880-a0f5-4a8a-960f-7861fe3fbd27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show only kerosene and diesel when these are the given fuel types and no date is specified",
              "fullTitle": "the function to filter the rows of the table based on the fuel type and date should show only kerosene and diesel when these are the given fuel types and no date is specified",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1n55oadvbo().f[7]++;cov_1n55oadvbo().s[27]++;filterBy('tbl',['Kerosene','Diesel'],'');cov_1n55oadvbo().s[28]++;assert.equal($('#r3').css('visibility'),'visible');cov_1n55oadvbo().s[29]++;assert.equal($('#r5').css('visibility'),'visible');cov_1n55oadvbo().s[30]++;assert.equal($('#r7').css('visibility'),'visible');cov_1n55oadvbo().s[31]++;assert.isTrue($('#r1').is(':hidden'));cov_1n55oadvbo().s[32]++;assert.isTrue($('#r2').is(':hidden'));cov_1n55oadvbo().s[33]++;assert.isTrue($('#r4').is(':hidden'));cov_1n55oadvbo().s[34]++;assert.isTrue($('#r6').is(':hidden'));cov_1n55oadvbo().s[35]++;assert.isTrue($('#r8').is(':hidden'));",
              "err": {},
              "uuid": "03a22afd-693d-42a2-8d45-5d0e6292ff0a",
              "parentUUID": "97ee9880-a0f5-4a8a-960f-7861fe3fbd27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show only the fuel purchased on January 1, 2022 when it is the given date and no fuel type is specified",
              "fullTitle": "the function to filter the rows of the table based on the fuel type and date should show only the fuel purchased on January 1, 2022 when it is the given date and no fuel type is specified",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1n55oadvbo().f[8]++;cov_1n55oadvbo().s[37]++;filterBy('tbl',[],'Thu Jan 01 2022 17:04:16 GMT+0800 (China Standard Time)');cov_1n55oadvbo().s[38]++;assert.equal($('#r1').css('visibility'),'visible');cov_1n55oadvbo().s[39]++;assert.equal($('#r6').css('visibility'),'visible');cov_1n55oadvbo().s[40]++;assert.isTrue($('#r2').is(':hidden'));cov_1n55oadvbo().s[41]++;assert.isTrue($('#r3').is(':hidden'));cov_1n55oadvbo().s[42]++;assert.isTrue($('#r4').is(':hidden'));cov_1n55oadvbo().s[43]++;assert.isTrue($('#r5').is(':hidden'));cov_1n55oadvbo().s[44]++;assert.isTrue($('#r7').is(':hidden'));cov_1n55oadvbo().s[45]++;assert.isTrue($('#r8').is(':hidden'));",
              "err": {},
              "uuid": "098e156c-c6b0-429a-b2b1-26f6b409a77f",
              "parentUUID": "97ee9880-a0f5-4a8a-960f-7861fe3fbd27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show only the kerosene purchased on January 1, 2022 when this fuel type and date are the specified filters",
              "fullTitle": "the function to filter the rows of the table based on the fuel type and date should show only the kerosene purchased on January 1, 2022 when this fuel type and date are the specified filters",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1n55oadvbo().f[9]++;cov_1n55oadvbo().s[47]++;filterBy('tbl','Kerosene','Thu Jan 01 2022 17:04:16 GMT+0800 (China Standard Time)');cov_1n55oadvbo().s[48]++;assert.equal($('#r1').css('visibility'),'visible');cov_1n55oadvbo().s[49]++;assert.isTrue($('#r2').is(':hidden'));cov_1n55oadvbo().s[50]++;assert.isTrue($('#r3').is(':hidden'));cov_1n55oadvbo().s[51]++;assert.isTrue($('#r4').is(':hidden'));cov_1n55oadvbo().s[52]++;assert.isTrue($('#r5').is(':hidden'));cov_1n55oadvbo().s[53]++;assert.isTrue($('#r6').is(':hidden'));cov_1n55oadvbo().s[54]++;assert.isTrue($('#r7').is(':hidden'));cov_1n55oadvbo().s[55]++;assert.isTrue($('#r8').is(':hidden'));",
              "err": {},
              "uuid": "699d8ce5-42b9-4966-8852-50e90e662f55",
              "parentUUID": "97ee9880-a0f5-4a8a-960f-7861fe3fbd27",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d6485420-378f-4152-b9f5-37a3193b1dce",
            "03a22afd-693d-42a2-8d45-5d0e6292ff0a",
            "098e156c-c6b0-429a-b2b1-26f6b409a77f",
            "699d8ce5-42b9-4966-8852-50e90e662f55"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 70,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "f3206e40-711b-449b-a04b-de39c6b62c3e",
          "title": "the function to sort the entries of the table from A to Z",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\inventory-util-test.js",
          "file": "\\test\\inventory-util-test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"the function to sort the entries of the table from A to Z\"",
              "fullTitle": "the function to sort the entries of the table from A to Z \"before each\" hook in \"the function to sort the entries of the table from A to Z\"",
              "timedOut": false,
              "duration": 27,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1n55oadvbo().f[11]++;const dom=(cov_1n55oadvbo().s[58]++,new JSDOM(htmlDom,{url:'http://localhost'}));cov_1n55oadvbo().s[59]++;global.window=dom.window;cov_1n55oadvbo().s[60]++;global.document=dom.window.document;cov_1n55oadvbo().s[61]++;global.$=global.jQuery=require('jquery');",
              "err": {},
              "uuid": "81c5e4b5-d0b3-4d64-9c46-c128a1800df0",
              "parentUUID": "f3206e40-711b-449b-a04b-de39c6b62c3e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should sort the entries in alphabetical order",
              "fullTitle": "the function to sort the entries of the table from A to Z should sort the entries in alphabetical order",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1n55oadvbo().f[12]++;cov_1n55oadvbo().s[63]++;sortAtoZ('tbl');const rows=(cov_1n55oadvbo().s[64]++,$('#tbl > tbody > tr'));cov_1n55oadvbo().s[65]++;assert.equal(rows[0].getElementsByTagName('td')[0].textContent,'Diesel');cov_1n55oadvbo().s[66]++;assert.equal(rows[1].getElementsByTagName('td')[0].textContent,'Diesel');cov_1n55oadvbo().s[67]++;assert.equal(rows[2].getElementsByTagName('td')[0].textContent,'Gasoline');cov_1n55oadvbo().s[68]++;assert.equal(rows[3].getElementsByTagName('td')[0].textContent,'Gasoline');cov_1n55oadvbo().s[69]++;assert.equal(rows[4].getElementsByTagName('td')[0].textContent,'Kerosene');cov_1n55oadvbo().s[70]++;assert.equal(rows[5].getElementsByTagName('td')[0].textContent,'Kerosene');cov_1n55oadvbo().s[71]++;assert.equal(rows[6].getElementsByTagName('td')[0].textContent,'Premium Gasoline 95');cov_1n55oadvbo().s[72]++;assert.equal(rows[7].getElementsByTagName('td')[0].textContent,'Premium Gasoline 97');",
              "err": {},
              "uuid": "f25a9819-b3b1-4aa3-ab4a-db7cb37265d6",
              "parentUUID": "f3206e40-711b-449b-a04b-de39c6b62c3e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f25a9819-b3b1-4aa3-ab4a-db7cb37265d6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 18,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "f11ed26b-6d81-435d-8eed-c1ee96de2648",
          "title": "the function to sort the entries of the table from Z to A",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\inventory-util-test.js",
          "file": "\\test\\inventory-util-test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"the function to sort the entries of the table from Z to A\"",
              "fullTitle": "the function to sort the entries of the table from Z to A \"before each\" hook in \"the function to sort the entries of the table from Z to A\"",
              "timedOut": false,
              "duration": 27,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1n55oadvbo().f[14]++;const dom=(cov_1n55oadvbo().s[75]++,new JSDOM(htmlDom,{url:'http://localhost'}));cov_1n55oadvbo().s[76]++;global.window=dom.window;cov_1n55oadvbo().s[77]++;global.document=dom.window.document;cov_1n55oadvbo().s[78]++;global.$=global.jQuery=require('jquery');",
              "err": {},
              "uuid": "64845a18-f832-4486-889d-cbac806ad61a",
              "parentUUID": "f11ed26b-6d81-435d-8eed-c1ee96de2648",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should sort the entries in reverse alphabetical order",
              "fullTitle": "the function to sort the entries of the table from Z to A should sort the entries in reverse alphabetical order",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1n55oadvbo().f[15]++;cov_1n55oadvbo().s[80]++;sortZtoA('tbl');const rows=(cov_1n55oadvbo().s[81]++,$('#tbl > tbody > tr'));cov_1n55oadvbo().s[82]++;assert.equal(rows[7].getElementsByTagName('td')[0].textContent,'Diesel');cov_1n55oadvbo().s[83]++;assert.equal(rows[6].getElementsByTagName('td')[0].textContent,'Diesel');cov_1n55oadvbo().s[84]++;assert.equal(rows[5].getElementsByTagName('td')[0].textContent,'Gasoline');cov_1n55oadvbo().s[85]++;assert.equal(rows[4].getElementsByTagName('td')[0].textContent,'Gasoline');cov_1n55oadvbo().s[86]++;assert.equal(rows[3].getElementsByTagName('td')[0].textContent,'Kerosene');cov_1n55oadvbo().s[87]++;assert.equal(rows[2].getElementsByTagName('td')[0].textContent,'Kerosene');cov_1n55oadvbo().s[88]++;assert.equal(rows[1].getElementsByTagName('td')[0].textContent,'Premium Gasoline 95');cov_1n55oadvbo().s[89]++;assert.equal(rows[0].getElementsByTagName('td')[0].textContent,'Premium Gasoline 97');",
              "err": {},
              "uuid": "87cdc1c7-7191-4ba3-8785-1fe79a2bd203",
              "parentUUID": "f11ed26b-6d81-435d-8eed-c1ee96de2648",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "87cdc1c7-7191-4ba3-8785-1fe79a2bd203"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 26,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "a251eb12-d556-4cf7-b45a-45a516ab3607",
          "title": "the function to sort the entries of the table in ascending order based on the price",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\inventory-util-test.js",
          "file": "\\test\\inventory-util-test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"the function to sort the entries of the table in ascending order based on the price\"",
              "fullTitle": "the function to sort the entries of the table in ascending order based on the price \"before each\" hook in \"the function to sort the entries of the table in ascending order based on the price\"",
              "timedOut": false,
              "duration": 45,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1n55oadvbo().f[17]++;const dom=(cov_1n55oadvbo().s[92]++,new JSDOM(htmlDom,{url:'http://localhost'}));cov_1n55oadvbo().s[93]++;global.window=dom.window;cov_1n55oadvbo().s[94]++;global.document=dom.window.document;cov_1n55oadvbo().s[95]++;global.$=global.jQuery=require('jquery');",
              "err": {},
              "uuid": "8dad1c55-aee1-43be-b3dc-4a08b245053b",
              "parentUUID": "a251eb12-d556-4cf7-b45a-45a516ab3607",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should sort the entries in ascending order based on the price",
              "fullTitle": "the function to sort the entries of the table in ascending order based on the price should sort the entries in ascending order based on the price",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1n55oadvbo().f[18]++;cov_1n55oadvbo().s[97]++;sortLowToHigh('tbl');const rows=(cov_1n55oadvbo().s[98]++,$('#tbl > tbody > tr'));cov_1n55oadvbo().s[99]++;assert.equal(rows[0].getElementsByTagName('td')[3].textContent,'₱ 55');cov_1n55oadvbo().s[100]++;assert.equal(rows[1].getElementsByTagName('td')[3].textContent,'₱ 55');cov_1n55oadvbo().s[101]++;assert.equal(rows[2].getElementsByTagName('td')[3].textContent,'₱ 55');cov_1n55oadvbo().s[102]++;assert.equal(rows[3].getElementsByTagName('td')[3].textContent,'₱ 55');cov_1n55oadvbo().s[103]++;assert.equal(rows[4].getElementsByTagName('td')[3].textContent,'₱ 60');cov_1n55oadvbo().s[104]++;assert.equal(rows[5].getElementsByTagName('td')[3].textContent,'₱ 60');cov_1n55oadvbo().s[105]++;assert.equal(rows[6].getElementsByTagName('td')[3].textContent,'₱ 111');cov_1n55oadvbo().s[106]++;assert.equal(rows[7].getElementsByTagName('td')[3].textContent,'₱ 234');",
              "err": {},
              "uuid": "d6bb2cc8-8799-4fb1-ad02-e7fda654cb5a",
              "parentUUID": "a251eb12-d556-4cf7-b45a-45a516ab3607",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d6bb2cc8-8799-4fb1-ad02-e7fda654cb5a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "90e0f11f-62aa-414a-a72c-998021d2c100",
          "title": "the function to sort the entries of the table in descending order based on the price",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\inventory-util-test.js",
          "file": "\\test\\inventory-util-test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"the function to sort the entries of the table in descending order based on the price\"",
              "fullTitle": "the function to sort the entries of the table in descending order based on the price \"before each\" hook in \"the function to sort the entries of the table in descending order based on the price\"",
              "timedOut": false,
              "duration": 44,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1n55oadvbo().f[20]++;const dom=(cov_1n55oadvbo().s[109]++,new JSDOM(htmlDom,{url:'http://localhost'}));cov_1n55oadvbo().s[110]++;global.window=dom.window;cov_1n55oadvbo().s[111]++;global.document=dom.window.document;cov_1n55oadvbo().s[112]++;global.$=global.jQuery=require('jquery');",
              "err": {},
              "uuid": "c64dd316-b930-4f7a-92bc-4c1efc325a63",
              "parentUUID": "90e0f11f-62aa-414a-a72c-998021d2c100",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should sort the entries in descending order based on the price",
              "fullTitle": "the function to sort the entries of the table in descending order based on the price should sort the entries in descending order based on the price",
              "timedOut": false,
              "duration": 41,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1n55oadvbo().f[21]++;cov_1n55oadvbo().s[114]++;sortHighToLow('tbl');const rows=(cov_1n55oadvbo().s[115]++,$('#tbl > tbody > tr'));cov_1n55oadvbo().s[116]++;assert.equal(rows[7].getElementsByTagName('td')[3].textContent,'₱ 55');cov_1n55oadvbo().s[117]++;assert.equal(rows[6].getElementsByTagName('td')[3].textContent,'₱ 55');cov_1n55oadvbo().s[118]++;assert.equal(rows[5].getElementsByTagName('td')[3].textContent,'₱ 55');cov_1n55oadvbo().s[119]++;assert.equal(rows[4].getElementsByTagName('td')[3].textContent,'₱ 55');cov_1n55oadvbo().s[120]++;assert.equal(rows[3].getElementsByTagName('td')[3].textContent,'₱ 60');cov_1n55oadvbo().s[121]++;assert.equal(rows[2].getElementsByTagName('td')[3].textContent,'₱ 60');cov_1n55oadvbo().s[122]++;assert.equal(rows[1].getElementsByTagName('td')[3].textContent,'₱ 111');cov_1n55oadvbo().s[123]++;assert.equal(rows[0].getElementsByTagName('td')[3].textContent,'₱ 234');",
              "err": {},
              "uuid": "123e772a-89f9-4676-a0d4-fe2e57a9f0cf",
              "parentUUID": "90e0f11f-62aa-414a-a72c-998021d2c100",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "123e772a-89f9-4676-a0d4-fe2e57a9f0cf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 41,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "e38bd3f7-e537-4942-ab42-3f6f6a694af0",
          "title": "the function to get the log-in page",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\log-in-controller-test.js",
          "file": "\\test\\log-in-controller-test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"the function to get the log-in page\"",
              "fullTitle": "the function to get the log-in page \"before each\" hook in \"the function to get the log-in page\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_nozmquvn0().f[1]++;cov_nozmquvn0().s[10]++;res={render:sinon.spy(),redirect:sinon.spy()};",
              "err": {},
              "uuid": "c348ab72-97f5-4430-bc09-0f82edff7b97",
              "parentUUID": "e38bd3f7-e537-4942-ab42-3f6f6a694af0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render the page only once if the user is not logged in",
              "fullTitle": "the function to get the log-in page should render the page only once if the user is not logged in",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_nozmquvn0().f[2]++;const req=(cov_nozmquvn0().s[12]++,{session:{username:null}});cov_nozmquvn0().s[13]++;logInController.getLogIn(req,res);cov_nozmquvn0().s[14]++;assert.isTrue(res.render.calledOnce);",
              "err": {},
              "uuid": "671db8e9-4687-4860-aece-176b2e15c774",
              "parentUUID": "e38bd3f7-e537-4942-ab42-3f6f6a694af0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render the log-in page if the user is not logged in",
              "fullTitle": "the function to get the log-in page should render the log-in page if the user is not logged in",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_nozmquvn0().f[3]++;const req=(cov_nozmquvn0().s[16]++,{session:{username:null}});cov_nozmquvn0().s[17]++;logInController.getLogIn(req,res);cov_nozmquvn0().s[18]++;assert.equal(res.render.firstCall.args[0],'log-in');",
              "err": {},
              "uuid": "6650d7d8-6b47-434b-a940-709d96f3fcd0",
              "parentUUID": "e38bd3f7-e537-4942-ab42-3f6f6a694af0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not redirect to the home page if the user is not logged in",
              "fullTitle": "the function to get the log-in page should not redirect to the home page if the user is not logged in",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_nozmquvn0().f[4]++;const req=(cov_nozmquvn0().s[20]++,{session:{username:null}});cov_nozmquvn0().s[21]++;logInController.getLogIn(req,res);cov_nozmquvn0().s[22]++;assert.isTrue(res.redirect.notCalled);",
              "err": {},
              "uuid": "356f7bf3-a19d-4e5e-9cb8-bfc4883e149b",
              "parentUUID": "e38bd3f7-e537-4942-ab42-3f6f6a694af0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should redirect to the next page only once if the user is logged in",
              "fullTitle": "the function to get the log-in page should redirect to the next page only once if the user is logged in",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_nozmquvn0().f[5]++;const req=(cov_nozmquvn0().s[24]++,{session:{username:'bettina'}});cov_nozmquvn0().s[25]++;logInController.getLogIn(req,res);cov_nozmquvn0().s[26]++;assert.isTrue(res.redirect.calledOnce);",
              "err": {},
              "uuid": "33c9b92c-7067-4f48-99e9-55ac382a8ba2",
              "parentUUID": "e38bd3f7-e537-4942-ab42-3f6f6a694af0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should redirect to the home page if the user is logged in",
              "fullTitle": "the function to get the log-in page should redirect to the home page if the user is logged in",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_nozmquvn0().f[6]++;const req=(cov_nozmquvn0().s[28]++,{session:{username:'bettina'}});cov_nozmquvn0().s[29]++;logInController.getLogIn(req,res);cov_nozmquvn0().s[30]++;assert.equal(res.redirect.firstCall.args[0],'/getHome');",
              "err": {},
              "uuid": "d97e165a-c9b5-4273-beef-cf0b0553a781",
              "parentUUID": "e38bd3f7-e537-4942-ab42-3f6f6a694af0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not render the log-in page if the user is not logged in",
              "fullTitle": "the function to get the log-in page should not render the log-in page if the user is not logged in",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_nozmquvn0().f[7]++;const req=(cov_nozmquvn0().s[32]++,{session:{username:'bettina'}});cov_nozmquvn0().s[33]++;logInController.getLogIn(req,res);cov_nozmquvn0().s[34]++;assert.isTrue(res.render.notCalled);",
              "err": {},
              "uuid": "74a0c9d5-9de1-4b4a-a531-4ffe11486d48",
              "parentUUID": "e38bd3f7-e537-4942-ab42-3f6f6a694af0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "671db8e9-4687-4860-aece-176b2e15c774",
            "6650d7d8-6b47-434b-a940-709d96f3fcd0",
            "356f7bf3-a19d-4e5e-9cb8-bfc4883e149b",
            "33c9b92c-7067-4f48-99e9-55ac382a8ba2",
            "d97e165a-c9b5-4273-beef-cf0b0553a781",
            "74a0c9d5-9de1-4b4a-a531-4ffe11486d48"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "b1799c6a-1bfc-406a-9aed-6391dd41e655",
          "title": "the function to log a user into the application",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\log-in-controller-test.js",
          "file": "\\test\\log-in-controller-test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"the function to log a user into the application\"",
              "fullTitle": "the function to log a user into the application \"before each\" hook in \"the function to log a user into the application\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_nozmquvn0().f[9]++;cov_nozmquvn0().s[37]++;req={body:{loginUsername:'hello',loginPassword:'hello'}};cov_nozmquvn0().s[38]++;res={status:sinon.stub().returnsThis(),json:sinon.stub(),send:sinon.stub()};cov_nozmquvn0().s[39]++;expectedResult={email:'hello@gmail.com',name:'hello',username:'hello',role:'inventory-manager',password:'hello'};cov_nozmquvn0().s[40]++;sinon.stub(db,'findOne').yields(expectedResult);cov_nozmquvn0().s[41]++;logInController.postLogIn(req,res);",
              "err": {},
              "uuid": "f389b7a7-6bf5-43d4-aeb5-13272d3c0e4f",
              "parentUUID": "b1799c6a-1bfc-406a-9aed-6391dd41e655",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should search the database for the username only once",
              "fullTitle": "the function to log a user into the application should search the database for the username only once",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_nozmquvn0().f[10]++;cov_nozmquvn0().s[43]++;assert.isTrue(db.findOne.calledOnce);cov_nozmquvn0().s[44]++;db.findOne.restore();",
              "err": {},
              "uuid": "258b55b4-6bdb-42aa-834e-b91c989f4045",
              "parentUUID": "b1799c6a-1bfc-406a-9aed-6391dd41e655",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should search the database for the username with the correct arguments",
              "fullTitle": "the function to log a user into the application should search the database for the username with the correct arguments",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_nozmquvn0().f[11]++;cov_nozmquvn0().s[46]++;assert.equal(db.findOne.firstCall.args[0],Account);cov_nozmquvn0().s[47]++;expect(db.findOne.firstCall.args[1]).to.deep.equalInAnyOrder({username:req.body.loginUsername});cov_nozmquvn0().s[48]++;db.findOne.restore();",
              "err": {},
              "uuid": "62f9c7f1-3b5c-459a-871f-22d0b09cc062",
              "parentUUID": "b1799c6a-1bfc-406a-9aed-6391dd41e655",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "258b55b4-6bdb-42aa-834e-b91c989f4045",
            "62f9c7f1-3b5c-459a-871f-22d0b09cc062"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "cbcb0057-a06e-4393-8918-81fc80f412b6",
          "title": "the function to grant access depending on whether the password is equivalent to the hashed password in the database",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\log-in-controller-util-test.js",
          "file": "\\test\\log-in-controller-util-test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"the function to grant access depending on whether the password is equivalent to the hashed password in the database\"",
              "fullTitle": "the function to grant access depending on whether the password is equivalent to the hashed password in the database \"before each\" hook in \"the function to grant access depending on whether the password is equivalent to the hashed password in the database\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_24ko9fp5a0().f[1]++;cov_24ko9fp5a0().s[8]++;res={status:sinon.stub().returnsThis(),json:sinon.stub(),send:sinon.spy()};cov_24ko9fp5a0().s[9]++;req={session:{username:'',role:''}};cov_24ko9fp5a0().s[10]++;result={username:'kikyo',role:'administrator'};",
              "err": {},
              "uuid": "759b22b8-092b-422f-ab78-d03f982a4f44",
              "parentUUID": "cbcb0057-a06e-4393-8918-81fc80f412b6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"the function to grant access depending on whether the password is equivalent to the hashed password in the database\"",
              "fullTitle": "the function to grant access depending on whether the password is equivalent to the hashed password in the database \"after each\" hook in \"the function to grant access depending on whether the password is equivalent to the hashed password in the database\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_24ko9fp5a0().f[2]++;cov_24ko9fp5a0().s[12]++;bcrypt.compare.restore();",
              "err": {},
              "uuid": "5e13250f-4073-4812-9fbb-4c21bfb1df34",
              "parentUUID": "cbcb0057-a06e-4393-8918-81fc80f412b6",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should set the session username to the account username if the password matches the value in the database",
              "fullTitle": "the function to grant access depending on whether the password is equivalent to the hashed password in the database should set the session username to the account username if the password matches the value in the database",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_24ko9fp5a0().f[3]++;cov_24ko9fp5a0().s[14]++;sinon.stub(bcrypt,'compare').yields(null,true);cov_24ko9fp5a0().s[15]++;logInControllerUtil.logInUtil(req,res,result,'hello');cov_24ko9fp5a0().s[16]++;assert.equal(req.session.username,result.username);",
              "err": {},
              "uuid": "f9dad8ff-d6a7-4263-8576-3bc7b717f579",
              "parentUUID": "cbcb0057-a06e-4393-8918-81fc80f412b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should set the session role to the account role if the password matches the value in the database",
              "fullTitle": "the function to grant access depending on whether the password is equivalent to the hashed password in the database should set the session role to the account role if the password matches the value in the database",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_24ko9fp5a0().f[4]++;cov_24ko9fp5a0().s[18]++;sinon.stub(bcrypt,'compare').yields(null,true);cov_24ko9fp5a0().s[19]++;logInControllerUtil.logInUtil(req,res,result,'hello');cov_24ko9fp5a0().s[20]++;assert.equal(req.session.role,result.role);",
              "err": {},
              "uuid": "8b7b2793-ad7d-4db1-a0ba-dd25cb977491",
              "parentUUID": "cbcb0057-a06e-4393-8918-81fc80f412b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not set the session username to the account username if the password does not match the value in the database",
              "fullTitle": "the function to grant access depending on whether the password is equivalent to the hashed password in the database should not set the session username to the account username if the password does not match the value in the database",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_24ko9fp5a0().f[5]++;cov_24ko9fp5a0().s[22]++;sinon.stub(bcrypt,'compare').yields(null,false);cov_24ko9fp5a0().s[23]++;logInControllerUtil.logInUtil(req,res,result,'hello');cov_24ko9fp5a0().s[24]++;assert.equal(req.session.username,'');",
              "err": {},
              "uuid": "08fb3cce-2b36-4070-be31-c9dcb080cb59",
              "parentUUID": "cbcb0057-a06e-4393-8918-81fc80f412b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not set the session role to the account role if the password does not match the value in the database",
              "fullTitle": "the function to grant access depending on whether the password is equivalent to the hashed password in the database should not set the session role to the account role if the password does not match the value in the database",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_24ko9fp5a0().f[6]++;cov_24ko9fp5a0().s[26]++;sinon.stub(bcrypt,'compare').yields(null,false);cov_24ko9fp5a0().s[27]++;logInControllerUtil.logInUtil(req,res,result,'hello');cov_24ko9fp5a0().s[28]++;assert.equal(req.session.role,'');",
              "err": {},
              "uuid": "d390b599-2517-489e-8ea4-302801923fd0",
              "parentUUID": "cbcb0057-a06e-4393-8918-81fc80f412b6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f9dad8ff-d6a7-4263-8576-3bc7b717f579",
            "8b7b2793-ad7d-4db1-a0ba-dd25cb977491",
            "08fb3cce-2b36-4070-be31-c9dcb080cb59",
            "d390b599-2517-489e-8ea4-302801923fd0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "535a7680-a337-4cfb-8b8b-66ab3b398e76",
          "title": "the function to log an active user out of the application",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\log-out-controller-test.js",
          "file": "\\test\\log-out-controller-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should destroy the active session only once",
              "fullTitle": "the function to log an active user out of the application should destroy the active session only once",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_cc69kkka6().f[1]++;const req=(cov_cc69kkka6().s[5]++,{session:{destroy:sinon.spy()}});const res=(cov_cc69kkka6().s[6]++,{});cov_cc69kkka6().s[7]++;logOutController.getLogOut(req,res);cov_cc69kkka6().s[8]++;assert.isTrue(req.session.destroy.calledOnce);",
              "err": {},
              "uuid": "43a380f6-1013-4df6-a40a-a314a2cde7c3",
              "parentUUID": "535a7680-a337-4cfb-8b8b-66ab3b398e76",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "43a380f6-1013-4df6-a40a-a314a2cde7c3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "0031e5f0-323f-4894-9ad4-cbde86468bb8",
          "title": "the utility function for logging an active user out of the application",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\log-out-controller-util-test.js",
          "file": "\\test\\log-out-controller-util-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should set the active session to null only once",
              "fullTitle": "the utility function for logging an active user out of the application should set the active session to null only once",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1tm2c9ymeb().f[1]++;const req=(cov_1tm2c9ymeb().s[5]++,{session:'hello'});const res=(cov_1tm2c9ymeb().s[6]++,{redirect:sinon.spy()});cov_1tm2c9ymeb().s[7]++;logOutControllerUtil.logOutUtil(req,res);cov_1tm2c9ymeb().s[8]++;assert.isNull(req.session);",
              "err": {},
              "uuid": "00d164c6-e3e7-446d-bd3b-e6dc4b9259e1",
              "parentUUID": "0031e5f0-323f-4894-9ad4-cbde86468bb8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should redirect the log-in page only once",
              "fullTitle": "the utility function for logging an active user out of the application should redirect the log-in page only once",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1tm2c9ymeb().f[2]++;const req=(cov_1tm2c9ymeb().s[10]++,{session:'hello'});const res=(cov_1tm2c9ymeb().s[11]++,{redirect:sinon.spy()});cov_1tm2c9ymeb().s[12]++;logOutControllerUtil.logOutUtil(req,res);cov_1tm2c9ymeb().s[13]++;assert.isTrue(res.redirect.calledOnce);",
              "err": {},
              "uuid": "74b2ed38-cd01-41a6-8fbf-59a4f1bea93b",
              "parentUUID": "0031e5f0-323f-4894-9ad4-cbde86468bb8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "00d164c6-e3e7-446d-bd3b-e6dc4b9259e1",
            "74b2ed38-cd01-41a6-8fbf-59a4f1bea93b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "6b9b0b3c-07b3-4b25-8af6-cb5661cbcec9",
          "title": "the function to get the register page",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\register-controller-test.js",
          "file": "\\test\\register-controller-test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"the function to get the register page\"",
              "fullTitle": "the function to get the register page \"before each\" hook in \"the function to get the register page\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1e651tf6po().f[1]++;cov_1e651tf6po().s[12]++;res={render:sinon.spy(),redirect:sinon.spy()};",
              "err": {},
              "uuid": "05e86aed-3030-4472-9835-9d60010c608e",
              "parentUUID": "6b9b0b3c-07b3-4b25-8af6-cb5661cbcec9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render the page only once if the user is not logged in",
              "fullTitle": "the function to get the register page should render the page only once if the user is not logged in",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1e651tf6po().f[2]++;const req=(cov_1e651tf6po().s[14]++,{session:{username:null}});cov_1e651tf6po().s[15]++;registerController.getRegister(req,res);cov_1e651tf6po().s[16]++;assert.isTrue(res.render.calledOnce);",
              "err": {},
              "uuid": "45239ba7-e859-423e-a22a-0669ff12ec5e",
              "parentUUID": "6b9b0b3c-07b3-4b25-8af6-cb5661cbcec9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render the register page if the user is not logged in",
              "fullTitle": "the function to get the register page should render the register page if the user is not logged in",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1e651tf6po().f[3]++;const req=(cov_1e651tf6po().s[18]++,{session:{username:null}});cov_1e651tf6po().s[19]++;registerController.getRegister(req,res);cov_1e651tf6po().s[20]++;assert.equal(res.render.firstCall.args[0],'register');",
              "err": {},
              "uuid": "af753ef4-7f2f-47b9-ac7c-729734525ba7",
              "parentUUID": "6b9b0b3c-07b3-4b25-8af6-cb5661cbcec9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not redirect to the home page if the user is not logged in",
              "fullTitle": "the function to get the register page should not redirect to the home page if the user is not logged in",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1e651tf6po().f[4]++;const req=(cov_1e651tf6po().s[22]++,{session:{username:null}});cov_1e651tf6po().s[23]++;registerController.getRegister(req,res);cov_1e651tf6po().s[24]++;assert.isTrue(res.redirect.notCalled);",
              "err": {},
              "uuid": "0ff541cd-d7c3-4976-97db-2283ecbdc31e",
              "parentUUID": "6b9b0b3c-07b3-4b25-8af6-cb5661cbcec9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should redirect to the next page only once if the user is logged in",
              "fullTitle": "the function to get the register page should redirect to the next page only once if the user is logged in",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1e651tf6po().f[5]++;const req=(cov_1e651tf6po().s[26]++,{session:{username:'bettina'}});cov_1e651tf6po().s[27]++;registerController.getRegister(req,res);cov_1e651tf6po().s[28]++;assert.isTrue(res.redirect.calledOnce);",
              "err": {},
              "uuid": "7e9e72cf-e985-42cc-b065-111703d4e4a2",
              "parentUUID": "6b9b0b3c-07b3-4b25-8af6-cb5661cbcec9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should redirect to the home page if the user is logged in",
              "fullTitle": "the function to get the register page should redirect to the home page if the user is logged in",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1e651tf6po().f[6]++;const req=(cov_1e651tf6po().s[30]++,{session:{username:'bettina'}});cov_1e651tf6po().s[31]++;registerController.getRegister(req,res);cov_1e651tf6po().s[32]++;assert.equal(res.redirect.firstCall.args[0],'/getHome');",
              "err": {},
              "uuid": "531592bf-8f61-4ab1-b8d2-c52b32633c2b",
              "parentUUID": "6b9b0b3c-07b3-4b25-8af6-cb5661cbcec9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not render the log-in page if the user is not logged in",
              "fullTitle": "the function to get the register page should not render the log-in page if the user is not logged in",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1e651tf6po().f[7]++;const req=(cov_1e651tf6po().s[34]++,{session:{username:'bettina'}});cov_1e651tf6po().s[35]++;registerController.getRegister(req,res);cov_1e651tf6po().s[36]++;assert.isTrue(res.render.notCalled);",
              "err": {},
              "uuid": "ae744638-36ec-4722-8360-2b9777be3f6e",
              "parentUUID": "6b9b0b3c-07b3-4b25-8af6-cb5661cbcec9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "45239ba7-e859-423e-a22a-0669ff12ec5e",
            "af753ef4-7f2f-47b9-ac7c-729734525ba7",
            "0ff541cd-d7c3-4976-97db-2283ecbdc31e",
            "7e9e72cf-e985-42cc-b065-111703d4e4a2",
            "531592bf-8f61-4ab1-b8d2-c52b32633c2b",
            "ae744638-36ec-4722-8360-2b9777be3f6e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "9e413080-32f3-47ea-a69a-1609545fa856",
          "title": "the function to register a new account",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\register-controller-test.js",
          "file": "\\test\\register-controller-test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"the function to register a new account\"",
              "fullTitle": "the function to register a new account \"before each\" hook in \"the function to register a new account\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1e651tf6po().f[9]++;cov_1e651tf6po().s[39]++;res={status:sinon.stub().returnsThis(),json:sinon.stub(),send:sinon.stub()};",
              "err": {},
              "uuid": "28b8282e-5e07-4099-8007-cee03f1ade01",
              "parentUUID": "9e413080-32f3-47ea-a69a-1609545fa856",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"the function to register a new account\"",
              "fullTitle": "the function to register a new account \"after each\" hook in \"the function to register a new account\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1e651tf6po().f[10]++;cov_1e651tf6po().s[41]++;bcrypt.hash.restore();",
              "err": {},
              "uuid": "b6d39a0b-abf1-4c70-982d-0dcdf9b7d256",
              "parentUUID": "9e413080-32f3-47ea-a69a-1609545fa856",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should hash the password only once",
              "fullTitle": "the function to register a new account should hash the password only once",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1e651tf6po().f[11]++;cov_1e651tf6po().s[43]++;req={body:{signupEmail:'hello@gmail.com',signupFname:'hello',signupLname:'hello',signupUsername:'hello',signupRole:'inventory-manager',signupPassword:'hello',signupConfirmPassword:'hello'}};cov_1e651tf6po().s[44]++;hash='fasdfasdfa';cov_1e651tf6po().s[45]++;sinon.stub(bcrypt,'hash').yields(null,hash);cov_1e651tf6po().s[46]++;registerController.postRegister(req,res);cov_1e651tf6po().s[47]++;assert.isTrue(bcrypt.hash.calledOnce);cov_1e651tf6po().s[48]++;assert.equal(bcrypt.hash.firstCall.args[0],req.body.signupPassword);",
              "err": {},
              "uuid": "3167aab8-f26e-407b-a55f-a16ba8e476f4",
              "parentUUID": "9e413080-32f3-47ea-a69a-1609545fa856",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should hash the password for the specified number of rounds",
              "fullTitle": "the function to register a new account should hash the password for the specified number of rounds",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1e651tf6po().f[12]++;cov_1e651tf6po().s[50]++;req={body:{signupEmail:'hello@gmail.com',signupFname:'hello',signupLname:'hello',signupUsername:'hello',signupRole:'inventory-manager',signupPassword:'hello',signupConfirmPassword:'hello'}};cov_1e651tf6po().s[51]++;hash='fasdfasdfa';cov_1e651tf6po().s[52]++;sinon.stub(bcrypt,'hash').yields(null,hash);cov_1e651tf6po().s[53]++;registerController.postRegister(req,res);cov_1e651tf6po().s[54]++;assert.equal(bcrypt.hash.firstCall.args[1],saltRounds);",
              "err": {},
              "uuid": "69cbccd1-f7c3-42b5-a5ff-48af5aad6023",
              "parentUUID": "9e413080-32f3-47ea-a69a-1609545fa856",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not hash the password if the passwords do not match",
              "fullTitle": "the function to register a new account should not hash the password if the passwords do not match",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1e651tf6po().f[13]++;cov_1e651tf6po().s[56]++;req={body:{signupEmail:'hello@gmail.com',signupFname:'hello',signupLname:'hello',signupUsername:'hello',signupRole:'inventory-manager',signupPassword:'hello',signupConfirmPassword:'hi'}};cov_1e651tf6po().s[57]++;hash='fasdfasdfa';cov_1e651tf6po().s[58]++;sinon.stub(bcrypt,'hash').yields(null,hash);cov_1e651tf6po().s[59]++;registerController.postRegister(req,res);cov_1e651tf6po().s[60]++;assert.isTrue(bcrypt.hash.notCalled);",
              "err": {},
              "uuid": "d2fd0239-78ef-410d-8f71-7f83185cc7b5",
              "parentUUID": "9e413080-32f3-47ea-a69a-1609545fa856",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3167aab8-f26e-407b-a55f-a16ba8e476f4",
            "69cbccd1-f7c3-42b5-a5ff-48af5aad6023",
            "d2fd0239-78ef-410d-8f71-7f83185cc7b5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "f7c2d271-f579-4ecd-8a90-41f275491054",
          "title": "the function to verify whether a username is unique",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\register-controller-test.js",
          "file": "\\test\\register-controller-test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"the function to verify whether a username is unique\"",
              "fullTitle": "the function to verify whether a username is unique \"before each\" hook in \"the function to verify whether a username is unique\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1e651tf6po().f[15]++;cov_1e651tf6po().s[63]++;req={query:{username:'hello',email:'hello@gmail.com'}};cov_1e651tf6po().s[64]++;res={status:sinon.stub().returnsThis(),json:sinon.stub(),send:sinon.stub()};cov_1e651tf6po().s[65]++;expectedResult={email:'hello@gmail.com',name:'hello',username:'hello',role:'inventory-manager',password:'hello'};",
              "err": {},
              "uuid": "50124b53-ae41-4464-8e4e-13c3ea7ac19c",
              "parentUUID": "f7c2d271-f579-4ecd-8a90-41f275491054",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"the function to verify whether a username is unique\"",
              "fullTitle": "the function to verify whether a username is unique \"after each\" hook in \"the function to verify whether a username is unique\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1e651tf6po().f[16]++;cov_1e651tf6po().s[67]++;db.findOne.restore();",
              "err": {},
              "uuid": "51d65b5b-1a39-4b01-86e2-8cc454890e5d",
              "parentUUID": "f7c2d271-f579-4ecd-8a90-41f275491054",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should search the database for the username only once",
              "fullTitle": "the function to verify whether a username is unique should search the database for the username only once",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1e651tf6po().f[17]++;cov_1e651tf6po().s[69]++;sinon.stub(db,'findOne').yields(expectedResult);cov_1e651tf6po().s[70]++;registerController.getCheckUsername(req,res);cov_1e651tf6po().s[71]++;assert.isTrue(db.findOne.calledOnce);",
              "err": {},
              "uuid": "3bdc8b37-2a7e-4895-a8c6-dee425030f2a",
              "parentUUID": "f7c2d271-f579-4ecd-8a90-41f275491054",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should search the database for the username with the correct arguments",
              "fullTitle": "the function to verify whether a username is unique should search the database for the username with the correct arguments",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1e651tf6po().f[18]++;cov_1e651tf6po().s[73]++;sinon.stub(db,'findOne').yields(expectedResult);cov_1e651tf6po().s[74]++;registerController.getCheckUsername(req,res);cov_1e651tf6po().s[75]++;assert.equal(db.findOne.firstCall.args[0],Account);cov_1e651tf6po().s[76]++;expect(db.findOne.firstCall.args[1]).to.deep.equalInAnyOrder({username:req.query.username.toLowerCase()});cov_1e651tf6po().s[77]++;assert.equal(db.findOne.firstCall.args[2],'username');",
              "err": {},
              "uuid": "ee57a150-f73b-4163-87ef-24b1e9a22674",
              "parentUUID": "f7c2d271-f579-4ecd-8a90-41f275491054",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3bdc8b37-2a7e-4895-a8c6-dee425030f2a",
            "ee57a150-f73b-4163-87ef-24b1e9a22674"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "28380ac0-aec1-4625-99b7-7b2dbfe57417",
          "title": "the function to verify whether an email address is unique",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\register-controller-test.js",
          "file": "\\test\\register-controller-test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"the function to verify whether an email address is unique\"",
              "fullTitle": "the function to verify whether an email address is unique \"before each\" hook in \"the function to verify whether an email address is unique\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1e651tf6po().f[20]++;cov_1e651tf6po().s[80]++;req={query:{username:'hello',email:'hello@gmail.com'}};cov_1e651tf6po().s[81]++;res={status:sinon.stub().returnsThis(),json:sinon.stub(),send:sinon.stub()};cov_1e651tf6po().s[82]++;expectedResult={email:'hello@gmail.com',name:'hello',username:'hello',role:'inventory-manager',password:'hello'};",
              "err": {},
              "uuid": "cfff1ce1-5c21-48cd-b957-70860a847731",
              "parentUUID": "28380ac0-aec1-4625-99b7-7b2dbfe57417",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"the function to verify whether an email address is unique\"",
              "fullTitle": "the function to verify whether an email address is unique \"after each\" hook in \"the function to verify whether an email address is unique\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1e651tf6po().f[21]++;cov_1e651tf6po().s[84]++;db.findOne.restore();",
              "err": {},
              "uuid": "526c2da9-532a-4bd4-882d-f0f86373a40c",
              "parentUUID": "28380ac0-aec1-4625-99b7-7b2dbfe57417",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should search the database for the email address only once",
              "fullTitle": "the function to verify whether an email address is unique should search the database for the email address only once",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1e651tf6po().f[22]++;cov_1e651tf6po().s[86]++;sinon.stub(db,'findOne').yields(expectedResult);cov_1e651tf6po().s[87]++;registerController.getCheckEmail(req,res);cov_1e651tf6po().s[88]++;assert.isTrue(db.findOne.calledOnce);",
              "err": {},
              "uuid": "964c5563-21eb-49da-9e9b-a21791a16cf6",
              "parentUUID": "28380ac0-aec1-4625-99b7-7b2dbfe57417",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should search the database for the email address with the correct arguments",
              "fullTitle": "the function to verify whether an email address is unique should search the database for the email address with the correct arguments",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_1e651tf6po().f[23]++;cov_1e651tf6po().s[90]++;sinon.stub(db,'findOne').yields(expectedResult);cov_1e651tf6po().s[91]++;registerController.getCheckEmail(req,res);cov_1e651tf6po().s[92]++;assert.equal(db.findOne.firstCall.args[0],Account);cov_1e651tf6po().s[93]++;expect(db.findOne.firstCall.args[1]).to.deep.equalInAnyOrder({email:req.query.email.toLowerCase()});cov_1e651tf6po().s[94]++;assert.equal(db.findOne.firstCall.args[2],'email');",
              "err": {},
              "uuid": "21812e91-5e74-466a-b29f-37973268b4a1",
              "parentUUID": "28380ac0-aec1-4625-99b7-7b2dbfe57417",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "964c5563-21eb-49da-9e9b-a21791a16cf6",
            "21812e91-5e74-466a-b29f-37973268b4a1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "55b2df2e-bbd3-4a0d-b350-f5606c01bc13",
          "title": "the function to check if the password has at least 12 characters",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\register-validate-test.js",
          "file": "\\test\\register-validate-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return a Boolean",
              "fullTitle": "the function to check if the password has at least 12 characters should return a Boolean",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2ijqrn3nps().f[1]++;const result=(cov_2ijqrn3nps().s[4]++,isPasswordLengthValid('abc12345678'));cov_2ijqrn3nps().s[5]++;assert.isBoolean(result);",
              "err": {},
              "uuid": "9e4aa46c-91df-4898-b39d-f9ed14a17cc9",
              "parentUUID": "55b2df2e-bbd3-4a0d-b350-f5606c01bc13",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when the password has less than 12 characters",
              "fullTitle": "the function to check if the password has at least 12 characters should return false when the password has less than 12 characters",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2ijqrn3nps().f[2]++;const result=(cov_2ijqrn3nps().s[7]++,isPasswordLengthValid('abc12345678'));cov_2ijqrn3nps().s[8]++;assert.isFalse(result);",
              "err": {},
              "uuid": "11887021-2fc9-4d4a-81ea-12cc40e15bd0",
              "parentUUID": "55b2df2e-bbd3-4a0d-b350-f5606c01bc13",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when the password has exactly 12 characters",
              "fullTitle": "the function to check if the password has at least 12 characters should return false when the password has exactly 12 characters",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2ijqrn3nps().f[3]++;const result=(cov_2ijqrn3nps().s[10]++,isPasswordLengthValid('abcd12345678'));cov_2ijqrn3nps().s[11]++;assert.isTrue(result);",
              "err": {},
              "uuid": "c0fc1272-e017-428a-9815-b33dcaa79df0",
              "parentUUID": "55b2df2e-bbd3-4a0d-b350-f5606c01bc13",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when the password has more than 12 characters",
              "fullTitle": "the function to check if the password has at least 12 characters should return false when the password has more than 12 characters",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2ijqrn3nps().f[4]++;const result=(cov_2ijqrn3nps().s[13]++,isPasswordLengthValid('abcdef1234567890'));cov_2ijqrn3nps().s[14]++;assert.isTrue(result);",
              "err": {},
              "uuid": "622b67a7-ef4c-4c51-a087-687c15d9df66",
              "parentUUID": "55b2df2e-bbd3-4a0d-b350-f5606c01bc13",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9e4aa46c-91df-4898-b39d-f9ed14a17cc9",
            "11887021-2fc9-4d4a-81ea-12cc40e15bd0",
            "c0fc1272-e017-428a-9815-b33dcaa79df0",
            "622b67a7-ef4c-4c51-a087-687c15d9df66"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "cc4caddd-4d27-4a03-897c-644bf6b98eaf",
          "title": "the function to check if the password has at least one lowercase letter, uppercase letter, number, and punctuation",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\register-validate-test.js",
          "file": "\\test\\register-validate-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return a Boolean",
              "fullTitle": "the function to check if the password has at least one lowercase letter, uppercase letter, number, and punctuation should return a Boolean",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2ijqrn3nps().f[6]++;const result=(cov_2ijqrn3nps().s[17]++,isPasswordFormatValid('abc12345678'));cov_2ijqrn3nps().s[18]++;assert.isBoolean(result);",
              "err": {},
              "uuid": "ecfe85e1-ded4-4b2e-8bb4-49b69e7aae3d",
              "parentUUID": "cc4caddd-4d27-4a03-897c-644bf6b98eaf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if password contains only lowercase letters",
              "fullTitle": "the function to check if the password has at least one lowercase letter, uppercase letter, number, and punctuation should return false if password contains only lowercase letters",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2ijqrn3nps().f[7]++;const result=(cov_2ijqrn3nps().s[20]++,isPasswordFormatValid('abcd'));cov_2ijqrn3nps().s[21]++;assert.isFalse(result);",
              "err": {},
              "uuid": "a07df6a0-18d2-4e3e-a4ad-89e4cd40f5e3",
              "parentUUID": "cc4caddd-4d27-4a03-897c-644bf6b98eaf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if password contains only uppercase letters",
              "fullTitle": "the function to check if the password has at least one lowercase letter, uppercase letter, number, and punctuation should return false if password contains only uppercase letters",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2ijqrn3nps().f[8]++;const result=(cov_2ijqrn3nps().s[23]++,isPasswordFormatValid('ABCD'));cov_2ijqrn3nps().s[24]++;assert.isFalse(result);",
              "err": {},
              "uuid": "5cc921ab-3d02-481a-9f4b-06d99c6416b5",
              "parentUUID": "cc4caddd-4d27-4a03-897c-644bf6b98eaf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if password contains only numbers",
              "fullTitle": "the function to check if the password has at least one lowercase letter, uppercase letter, number, and punctuation should return false if password contains only numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2ijqrn3nps().f[9]++;const result=(cov_2ijqrn3nps().s[26]++,isPasswordFormatValid('1234'));cov_2ijqrn3nps().s[27]++;assert.isFalse(result);",
              "err": {},
              "uuid": "d7300e5f-5d30-4b5c-be0a-021d67f0c851",
              "parentUUID": "cc4caddd-4d27-4a03-897c-644bf6b98eaf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if password contains only punctuations",
              "fullTitle": "the function to check if the password has at least one lowercase letter, uppercase letter, number, and punctuation should return false if password contains only punctuations",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2ijqrn3nps().f[10]++;const result=(cov_2ijqrn3nps().s[29]++,isPasswordFormatValid('./({'));cov_2ijqrn3nps().s[30]++;assert.isFalse(result);",
              "err": {},
              "uuid": "92e45735-4809-484b-9176-aafb68ef677c",
              "parentUUID": "cc4caddd-4d27-4a03-897c-644bf6b98eaf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if password contains only letters",
              "fullTitle": "the function to check if the password has at least one lowercase letter, uppercase letter, number, and punctuation should return false if password contains only letters",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2ijqrn3nps().f[11]++;const result=(cov_2ijqrn3nps().s[32]++,isPasswordFormatValid('aAtGbBC'));cov_2ijqrn3nps().s[33]++;assert.isFalse(result);",
              "err": {},
              "uuid": "1f18c991-4240-4e70-811e-11a4a586abc6",
              "parentUUID": "cc4caddd-4d27-4a03-897c-644bf6b98eaf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if password contains only letters and numbers",
              "fullTitle": "the function to check if the password has at least one lowercase letter, uppercase letter, number, and punctuation should return false if password contains only letters and numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2ijqrn3nps().f[12]++;const result=(cov_2ijqrn3nps().s[35]++,isPasswordFormatValid('aA1234tGbBC'));cov_2ijqrn3nps().s[36]++;assert.isFalse(result);",
              "err": {},
              "uuid": "ff1c444f-b537-4eb6-87c5-16050d717b9e",
              "parentUUID": "cc4caddd-4d27-4a03-897c-644bf6b98eaf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if password contains only numbers and punctuations",
              "fullTitle": "the function to check if the password has at least one lowercase letter, uppercase letter, number, and punctuation should return false if password contains only numbers and punctuations",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2ijqrn3nps().f[13]++;const result=(cov_2ijqrn3nps().s[38]++,isPasswordFormatValid('12423;()*'));cov_2ijqrn3nps().s[39]++;assert.isFalse(result);",
              "err": {},
              "uuid": "d8c78af5-fec0-4089-8282-e0913f85ef93",
              "parentUUID": "cc4caddd-4d27-4a03-897c-644bf6b98eaf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if password contains only letters and punctuations",
              "fullTitle": "the function to check if the password has at least one lowercase letter, uppercase letter, number, and punctuation should return false if password contains only letters and punctuations",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2ijqrn3nps().f[14]++;const result=(cov_2ijqrn3nps().s[41]++,isPasswordFormatValid('sdfasd;()AFfGT*'));cov_2ijqrn3nps().s[42]++;assert.isFalse(result);",
              "err": {},
              "uuid": "dd466f68-1aec-43f9-b551-25ee40c99bb9",
              "parentUUID": "cc4caddd-4d27-4a03-897c-644bf6b98eaf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if password contains only uppercase letters, numbers and punctuations",
              "fullTitle": "the function to check if the password has at least one lowercase letter, uppercase letter, number, and punctuation should return false if password contains only uppercase letters, numbers and punctuations",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2ijqrn3nps().f[15]++;const result=(cov_2ijqrn3nps().s[44]++,isPasswordFormatValid('23534;()AFGT*'));cov_2ijqrn3nps().s[45]++;assert.isFalse(result);",
              "err": {},
              "uuid": "08449bed-1317-4af8-a2d9-bf85c7a496f7",
              "parentUUID": "cc4caddd-4d27-4a03-897c-644bf6b98eaf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if password contains only lowercase letters, numbers and punctuations",
              "fullTitle": "the function to check if the password has at least one lowercase letter, uppercase letter, number, and punctuation should return false if password contains only lowercase letters, numbers and punctuations",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2ijqrn3nps().f[16]++;const result=(cov_2ijqrn3nps().s[47]++,isPasswordFormatValid('sdfasd;()2345*'));cov_2ijqrn3nps().s[48]++;assert.isFalse(result);",
              "err": {},
              "uuid": "2586d8d4-3335-411b-81f6-9d88a791e1c1",
              "parentUUID": "cc4caddd-4d27-4a03-897c-644bf6b98eaf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true if password contains at least one lowercase letter, uppercase letter, number, and punctuation",
              "fullTitle": "the function to check if the password has at least one lowercase letter, uppercase letter, number, and punctuation should return true if password contains at least one lowercase letter, uppercase letter, number, and punctuation",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2ijqrn3nps().f[17]++;const result=(cov_2ijqrn3nps().s[50]++,isPasswordFormatValid('aAdsfR3234;{Z}'));cov_2ijqrn3nps().s[51]++;assert.isTrue(result);",
              "err": {},
              "uuid": "31e6a14f-c9b5-4ee2-8ad4-d68e25fa8110",
              "parentUUID": "cc4caddd-4d27-4a03-897c-644bf6b98eaf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ecfe85e1-ded4-4b2e-8bb4-49b69e7aae3d",
            "a07df6a0-18d2-4e3e-a4ad-89e4cd40f5e3",
            "5cc921ab-3d02-481a-9f4b-06d99c6416b5",
            "d7300e5f-5d30-4b5c-be0a-021d67f0c851",
            "92e45735-4809-484b-9176-aafb68ef677c",
            "1f18c991-4240-4e70-811e-11a4a586abc6",
            "ff1c444f-b537-4eb6-87c5-16050d717b9e",
            "d8c78af5-fec0-4089-8282-e0913f85ef93",
            "dd466f68-1aec-43f9-b551-25ee40c99bb9",
            "08449bed-1317-4af8-a2d9-bf85c7a496f7",
            "2586d8d4-3335-411b-81f6-9d88a791e1c1",
            "31e6a14f-c9b5-4ee2-8ad4-d68e25fa8110"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "e7b2b91b-c142-4a8b-949c-1a23a96c9a10",
          "title": "the function to check if the trimmed username has at least one character",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\register-validate-test.js",
          "file": "\\test\\register-validate-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return a Boolean",
              "fullTitle": "the function to check if the trimmed username has at least one character should return a Boolean",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2ijqrn3nps().f[19]++;const result=(cov_2ijqrn3nps().s[54]++,isUsernameLengthValid('abc12345678'));cov_2ijqrn3nps().s[55]++;assert.isBoolean(result);",
              "err": {},
              "uuid": "1573f6e3-a1f6-4539-bfe3-691d54f99b5c",
              "parentUUID": "e7b2b91b-c142-4a8b-949c-1a23a96c9a10",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if the username consists only of a single space",
              "fullTitle": "the function to check if the trimmed username has at least one character should return false if the username consists only of a single space",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2ijqrn3nps().f[20]++;const result=(cov_2ijqrn3nps().s[57]++,isUsernameLengthValid(' '));cov_2ijqrn3nps().s[58]++;assert.isFalse(result);",
              "err": {},
              "uuid": "39817f04-4ee0-4ba3-9d43-16faf86268e5",
              "parentUUID": "e7b2b91b-c142-4a8b-949c-1a23a96c9a10",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if the username consists only of spaces",
              "fullTitle": "the function to check if the trimmed username has at least one character should return false if the username consists only of spaces",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2ijqrn3nps().f[21]++;const result=(cov_2ijqrn3nps().s[60]++,isUsernameLengthValid('    '));cov_2ijqrn3nps().s[61]++;assert.isFalse(result);",
              "err": {},
              "uuid": "94e285ec-de83-4f25-b536-8f30d502087c",
              "parentUUID": "e7b2b91b-c142-4a8b-949c-1a23a96c9a10",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true if the trimmed username consists at least one character",
              "fullTitle": "the function to check if the trimmed username has at least one character should return true if the trimmed username consists at least one character",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2ijqrn3nps().f[22]++;const result=(cov_2ijqrn3nps().s[63]++,isUsernameLengthValid(' memgonzales'));cov_2ijqrn3nps().s[64]++;assert.isTrue(result);",
              "err": {},
              "uuid": "456bf740-193e-4c70-9f0d-8d0b797ddfbc",
              "parentUUID": "e7b2b91b-c142-4a8b-949c-1a23a96c9a10",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1573f6e3-a1f6-4539-bfe3-691d54f99b5c",
            "39817f04-4ee0-4ba3-9d43-16faf86268e5",
            "94e285ec-de83-4f25-b536-8f30d502087c",
            "456bf740-193e-4c70-9f0d-8d0b797ddfbc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "851a2751-c59c-43c6-90ca-f71b3bc930f9",
          "title": "the function to check if the username is not composed solely of special characters",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\register-validate-test.js",
          "file": "\\test\\register-validate-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return a Boolean",
              "fullTitle": "the function to check if the username is not composed solely of special characters should return a Boolean",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2ijqrn3nps().f[24]++;const result=(cov_2ijqrn3nps().s[67]++,isUsernameFormatValid('@@@#@$#@'));cov_2ijqrn3nps().s[68]++;assert.isBoolean(result);",
              "err": {},
              "uuid": "02a4e120-f0bc-4241-96ed-33bca329def2",
              "parentUUID": "851a2751-c59c-43c6-90ca-f71b3bc930f9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if the username is composed solely of special characters",
              "fullTitle": "the function to check if the username is not composed solely of special characters should return false if the username is composed solely of special characters",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2ijqrn3nps().f[25]++;const result=(cov_2ijqrn3nps().s[70]++,isUsernameFormatValid('@@@#@$#@'));cov_2ijqrn3nps().s[71]++;assert.isFalse(result);",
              "err": {},
              "uuid": "3d1deb8e-e91e-4423-837f-6f414f9a26da",
              "parentUUID": "851a2751-c59c-43c6-90ca-f71b3bc930f9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if the username is composed solely of spaces",
              "fullTitle": "the function to check if the username is not composed solely of special characters should return false if the username is composed solely of spaces",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2ijqrn3nps().f[26]++;const result=(cov_2ijqrn3nps().s[73]++,isUsernameFormatValid('      '));cov_2ijqrn3nps().s[74]++;assert.isFalse(result);",
              "err": {},
              "uuid": "a6e28944-effd-4ba6-94e7-f4ac7fd09a53",
              "parentUUID": "851a2751-c59c-43c6-90ca-f71b3bc930f9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if the username is not composed solely of special characters",
              "fullTitle": "the function to check if the username is not composed solely of special characters should return false if the username is not composed solely of special characters",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2ijqrn3nps().f[27]++;const result=(cov_2ijqrn3nps().s[76]++,isUsernameFormatValid('   134143;dDASfasd   '));cov_2ijqrn3nps().s[77]++;assert.isTrue(result);",
              "err": {},
              "uuid": "11f7b8dd-d991-4eb3-af90-f1b2d000237d",
              "parentUUID": "851a2751-c59c-43c6-90ca-f71b3bc930f9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "02a4e120-f0bc-4241-96ed-33bca329def2",
            "3d1deb8e-e91e-4423-837f-6f414f9a26da",
            "a6e28944-effd-4ba6-94e7-f4ac7fd09a53",
            "11f7b8dd-d991-4eb3-af90-f1b2d000237d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "92d37601-c372-4000-a313-8d3a7a6e6367",
          "title": "the function to check if passwords match",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\register-validate-test.js",
          "file": "\\test\\register-validate-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return a Boolean",
              "fullTitle": "the function to check if passwords match should return a Boolean",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2ijqrn3nps().f[29]++;const result=(cov_2ijqrn3nps().s[80]++,arePasswordsMatching('hello','hello'));cov_2ijqrn3nps().s[81]++;assert.isBoolean(result);",
              "err": {},
              "uuid": "af100968-3c43-4be6-b372-c79e4c7abd84",
              "parentUUID": "92d37601-c372-4000-a313-8d3a7a6e6367",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if the passwords do not match",
              "fullTitle": "the function to check if passwords match should return false if the passwords do not match",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2ijqrn3nps().f[30]++;const result=(cov_2ijqrn3nps().s[83]++,arePasswordsMatching('hellO','nihao'));cov_2ijqrn3nps().s[84]++;assert.isFalse(result);",
              "err": {},
              "uuid": "90724ad9-92a8-41d5-b60d-63b6eb18948d",
              "parentUUID": "92d37601-c372-4000-a313-8d3a7a6e6367",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if the passwords contain the same characters but with different capitalization",
              "fullTitle": "the function to check if passwords match should return false if the passwords contain the same characters but with different capitalization",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2ijqrn3nps().f[31]++;const result=(cov_2ijqrn3nps().s[86]++,arePasswordsMatching('hellO','hEllo'));cov_2ijqrn3nps().s[87]++;assert.isFalse(result);",
              "err": {},
              "uuid": "f87f2471-d6cd-402a-b9ef-89c20ece5b72",
              "parentUUID": "92d37601-c372-4000-a313-8d3a7a6e6367",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if the passwords are identical except for trailing spaces",
              "fullTitle": "the function to check if passwords match should return false if the passwords are identical except for trailing spaces",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2ijqrn3nps().f[32]++;const result=(cov_2ijqrn3nps().s[89]++,arePasswordsMatching('hello ','hello'));cov_2ijqrn3nps().s[90]++;assert.isFalse(result);",
              "err": {},
              "uuid": "78fc64d9-3d0f-417c-b57d-b89909f1f545",
              "parentUUID": "92d37601-c372-4000-a313-8d3a7a6e6367",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true if the passwords match",
              "fullTitle": "the function to check if passwords match should return true if the passwords match",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2ijqrn3nps().f[33]++;const result=(cov_2ijqrn3nps().s[92]++,arePasswordsMatching('hello','hello'));cov_2ijqrn3nps().s[93]++;assert.isTrue(result);",
              "err": {},
              "uuid": "2ca96158-42c9-4957-a21c-cbe1daf0b40c",
              "parentUUID": "92d37601-c372-4000-a313-8d3a7a6e6367",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "af100968-3c43-4be6-b372-c79e4c7abd84",
            "90724ad9-92a8-41d5-b60d-63b6eb18948d",
            "f87f2471-d6cd-402a-b9ef-89c20ece5b72",
            "78fc64d9-3d0f-417c-b57d-b89909f1f545",
            "2ca96158-42c9-4957-a21c-cbe1daf0b40c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "4df6856b-0268-4f2f-9b82-999afbcd9f1d",
          "title": "the function to convert the path of the status icon to its equivalent value in the database",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\transaction-delivery-util-test.js",
          "file": "\\test\\transaction-delivery-util-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return a string",
              "fullTitle": "the function to convert the path of the status icon to its equivalent value in the database should return a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_vcg2pxppw().f[1]++;const result=(cov_vcg2pxppw().s[8]++,getStatusFromIcon('/assets/pending.png'));cov_vcg2pxppw().s[9]++;assert.isString(result);",
              "err": {},
              "uuid": "4c860042-3076-49a2-ab01-c0a79e4b66d2",
              "parentUUID": "4df6856b-0268-4f2f-9b82-999afbcd9f1d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return completed if the path points to the icon for completed",
              "fullTitle": "the function to convert the path of the status icon to its equivalent value in the database should return completed if the path points to the icon for completed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_vcg2pxppw().f[2]++;const result=(cov_vcg2pxppw().s[11]++,getStatusFromIcon('/assets/completed.png'));cov_vcg2pxppw().s[12]++;assert.equal(result,'completed');",
              "err": {},
              "uuid": "4d55c8fc-9d0a-49ee-b65a-de0d83a748d9",
              "parentUUID": "4df6856b-0268-4f2f-9b82-999afbcd9f1d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return completed if the path points to the icon for accepted",
              "fullTitle": "the function to convert the path of the status icon to its equivalent value in the database should return completed if the path points to the icon for accepted",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_vcg2pxppw().f[3]++;const result=(cov_vcg2pxppw().s[14]++,getStatusFromIcon('/assets/accepted.png'));cov_vcg2pxppw().s[15]++;assert.equal(result,'completed');",
              "err": {},
              "uuid": "d2705ed7-1ab6-4677-859d-dc8853d0405a",
              "parentUUID": "4df6856b-0268-4f2f-9b82-999afbcd9f1d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return pending if the path points to the icon for pending",
              "fullTitle": "the function to convert the path of the status icon to its equivalent value in the database should return pending if the path points to the icon for pending",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_vcg2pxppw().f[4]++;const result=(cov_vcg2pxppw().s[17]++,getStatusFromIcon('/assets/pending.png'));cov_vcg2pxppw().s[18]++;assert.equal(result,'pending');",
              "err": {},
              "uuid": "62044e6f-13df-47a6-8913-7bea8fb067c0",
              "parentUUID": "4df6856b-0268-4f2f-9b82-999afbcd9f1d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return cancelled if the path points to the icon for rejected",
              "fullTitle": "the function to convert the path of the status icon to its equivalent value in the database should return cancelled if the path points to the icon for rejected",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_vcg2pxppw().f[5]++;const result=(cov_vcg2pxppw().s[20]++,getStatusFromIcon('/assets/rejected.png'));cov_vcg2pxppw().s[21]++;assert.equal(result,'cancelled');",
              "err": {},
              "uuid": "df726801-cda0-434c-acd7-bfa2aaa5af26",
              "parentUUID": "4df6856b-0268-4f2f-9b82-999afbcd9f1d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4c860042-3076-49a2-ab01-c0a79e4b66d2",
            "4d55c8fc-9d0a-49ee-b65a-de0d83a748d9",
            "d2705ed7-1ab6-4677-859d-dc8853d0405a",
            "62044e6f-13df-47a6-8913-7bea8fb067c0",
            "df726801-cda0-434c-acd7-bfa2aaa5af26"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "c014ffa2-a6a3-42eb-88f3-e5acac26d901",
          "title": "the function to show all the rows of a table",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\transaction-delivery-util-test.js",
          "file": "\\test\\transaction-delivery-util-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should make all the rows visible",
              "fullTitle": "the function to show all the rows of a table should make all the rows visible",
              "timedOut": false,
              "duration": 37,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_vcg2pxppw().f[7]++;const dom=(cov_vcg2pxppw().s[24]++,new JSDOM(htmlDom,{url:'http://localhost'}));cov_vcg2pxppw().s[25]++;global.window=dom.window;cov_vcg2pxppw().s[26]++;global.document=dom.window.document;cov_vcg2pxppw().s[27]++;global.$=global.jQuery=require('jquery');cov_vcg2pxppw().s[28]++;$('tr').hide();cov_vcg2pxppw().s[29]++;showAll('tbl2');cov_vcg2pxppw().s[30]++;$('tr').each(function(){cov_vcg2pxppw().f[8]++;cov_vcg2pxppw().s[31]++;assert.equal($(this).css('visibility'),'visible');});",
              "err": {},
              "uuid": "ec26431d-85d7-4806-ab73-0ad5118eff96",
              "parentUUID": "c014ffa2-a6a3-42eb-88f3-e5acac26d901",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ec26431d-85d7-4806-ab73-0ad5118eff96"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 37,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "a0046f59-202b-42f8-9ee7-6b4b29d99a1b",
          "title": "the function to filter the rows of the table based on the status and date",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\transaction-delivery-util-test.js",
          "file": "\\test\\transaction-delivery-util-test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"the function to filter the rows of the table based on the status and date\"",
              "fullTitle": "the function to filter the rows of the table based on the status and date \"before each\" hook in \"the function to filter the rows of the table based on the status and date\"",
              "timedOut": false,
              "duration": 16,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_vcg2pxppw().f[10]++;const dom=(cov_vcg2pxppw().s[34]++,new JSDOM(htmlDom,{url:'http://localhost'}));cov_vcg2pxppw().s[35]++;global.window=dom.window;cov_vcg2pxppw().s[36]++;global.document=dom.window.document;cov_vcg2pxppw().s[37]++;global.$=global.jQuery=require('jquery');",
              "err": {},
              "uuid": "38d81687-6002-4889-986a-4e88c6f50caa",
              "parentUUID": "a0046f59-202b-42f8-9ee7-6b4b29d99a1b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should show all the rows when no status and no date are specified",
              "fullTitle": "the function to filter the rows of the table based on the status and date should show all the rows when no status and no date are specified",
              "timedOut": false,
              "duration": 43,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_vcg2pxppw().f[11]++;cov_vcg2pxppw().s[39]++;filterBy('tbl2',[],'');cov_vcg2pxppw().s[40]++;$('tr').each(function(){cov_vcg2pxppw().f[12]++;cov_vcg2pxppw().s[41]++;assert.equal($(this).css('visibility'),'visible');});",
              "err": {},
              "uuid": "32b75c7f-5258-4a44-8953-2df178a0b4a7",
              "parentUUID": "a0046f59-202b-42f8-9ee7-6b4b29d99a1b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show only pending and accepted when these are the given status and no date is specified",
              "fullTitle": "the function to filter the rows of the table based on the status and date should show only pending and accepted when these are the given status and no date is specified",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_vcg2pxppw().f[13]++;cov_vcg2pxppw().s[43]++;filterBy('tbl2',['pending','accepted'],'');cov_vcg2pxppw().s[44]++;assert.equal($('#s1').css('visibility'),'visible');cov_vcg2pxppw().s[45]++;assert.equal($('#s3').css('visibility'),'visible');cov_vcg2pxppw().s[46]++;assert.isTrue($('#s2').is(':hidden'));",
              "err": {},
              "uuid": "523a6174-760c-4ebf-9494-aa3dd8f3026f",
              "parentUUID": "a0046f59-202b-42f8-9ee7-6b4b29d99a1b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show only the transaction on January 1, 2022 when it is the given date and no status is specified",
              "fullTitle": "the function to filter the rows of the table based on the status and date should show only the transaction on January 1, 2022 when it is the given date and no status is specified",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_vcg2pxppw().f[14]++;cov_vcg2pxppw().s[48]++;filterBy('tbl2',[],'Thu Jan 01 2022 17:04:16 GMT+0800 (China Standard Time)');cov_vcg2pxppw().s[49]++;assert.equal($('#s1').css('visibility'),'visible');cov_vcg2pxppw().s[50]++;assert.equal($('#s2').css('visibility'),'visible');cov_vcg2pxppw().s[51]++;assert.isTrue($('#s3').is(':hidden'));",
              "err": {},
              "uuid": "8ed3350a-f8e6-43c4-be9f-25ea8d3a7d13",
              "parentUUID": "a0046f59-202b-42f8-9ee7-6b4b29d99a1b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show only the pending transaction on January 1, 2022 when this status and date are the specified filters",
              "fullTitle": "the function to filter the rows of the table based on the status and date should show only the pending transaction on January 1, 2022 when this status and date are the specified filters",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_vcg2pxppw().f[15]++;cov_vcg2pxppw().s[53]++;filterBy('tbl','Kerosene','Thu Jan 01 2022 17:04:16 GMT+0800 (China Standard Time)');cov_vcg2pxppw().s[54]++;assert.equal($('#s1').css('visibility'),'visible');cov_vcg2pxppw().s[55]++;assert.isTrue($('#s2').is(':hidden'));cov_vcg2pxppw().s[56]++;assert.isTrue($('#s3').is(':hidden'));",
              "err": {},
              "uuid": "8ffaff3c-7fe7-42d5-b827-b3046602774f",
              "parentUUID": "a0046f59-202b-42f8-9ee7-6b4b29d99a1b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "32b75c7f-5258-4a44-8953-2df178a0b4a7",
            "523a6174-760c-4ebf-9494-aa3dd8f3026f",
            "8ed3350a-f8e6-43c4-be9f-25ea8d3a7d13",
            "8ffaff3c-7fe7-42d5-b827-b3046602774f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 60,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "0151a6eb-f728-4196-817a-088580095f24",
          "title": "the function to sort the entries of the table from A to Z",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\transaction-delivery-util-test.js",
          "file": "\\test\\transaction-delivery-util-test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"the function to sort the entries of the table from A to Z\"",
              "fullTitle": "the function to sort the entries of the table from A to Z \"before each\" hook in \"the function to sort the entries of the table from A to Z\"",
              "timedOut": false,
              "duration": 13,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_vcg2pxppw().f[17]++;const dom=(cov_vcg2pxppw().s[59]++,new JSDOM(htmlDom,{url:'http://localhost'}));cov_vcg2pxppw().s[60]++;global.window=dom.window;cov_vcg2pxppw().s[61]++;global.document=dom.window.document;cov_vcg2pxppw().s[62]++;global.$=global.jQuery=require('jquery');",
              "err": {},
              "uuid": "d0d86133-6971-4eb8-8316-fc5b30f92612",
              "parentUUID": "0151a6eb-f728-4196-817a-088580095f24",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should sort the entries in alphabetical order",
              "fullTitle": "the function to sort the entries of the table from A to Z should sort the entries in alphabetical order",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_vcg2pxppw().f[18]++;cov_vcg2pxppw().s[64]++;sortAtoZ('tbl2');const rows=(cov_vcg2pxppw().s[65]++,$('#tbl2 > tbody > tr'));cov_vcg2pxppw().s[66]++;assert.equal(rows[0].getElementsByTagName('td')[2].textContent,'Chevron');cov_vcg2pxppw().s[67]++;assert.equal(rows[1].getElementsByTagName('td')[2].textContent,'Petron');cov_vcg2pxppw().s[68]++;assert.equal(rows[2].getElementsByTagName('td')[2].textContent,'Shell');",
              "err": {},
              "uuid": "f4d35c90-6ec6-4fa3-b9b9-019308e058f4",
              "parentUUID": "0151a6eb-f728-4196-817a-088580095f24",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f4d35c90-6ec6-4fa3-b9b9-019308e058f4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "4e928bc9-ab38-4478-9418-cf5cc52a31eb",
          "title": "the function to sort the entries of the table from Z to A",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\transaction-delivery-util-test.js",
          "file": "\\test\\transaction-delivery-util-test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"the function to sort the entries of the table from Z to A\"",
              "fullTitle": "the function to sort the entries of the table from Z to A \"before each\" hook in \"the function to sort the entries of the table from Z to A\"",
              "timedOut": false,
              "duration": 23,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_vcg2pxppw().f[20]++;const dom=(cov_vcg2pxppw().s[71]++,new JSDOM(htmlDom,{url:'http://localhost'}));cov_vcg2pxppw().s[72]++;global.window=dom.window;cov_vcg2pxppw().s[73]++;global.document=dom.window.document;cov_vcg2pxppw().s[74]++;global.$=global.jQuery=require('jquery');",
              "err": {},
              "uuid": "7e3b2565-309d-4760-88a9-31fab4bb93db",
              "parentUUID": "4e928bc9-ab38-4478-9418-cf5cc52a31eb",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should sort the entries in reverse alphabetical order",
              "fullTitle": "the function to sort the entries of the table from Z to A should sort the entries in reverse alphabetical order",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_vcg2pxppw().f[21]++;cov_vcg2pxppw().s[76]++;sortZtoA('tbl2');const rows=(cov_vcg2pxppw().s[77]++,$('#tbl2 > tbody > tr'));cov_vcg2pxppw().s[78]++;assert.equal(rows[2].getElementsByTagName('td')[2].textContent,'Chevron');cov_vcg2pxppw().s[79]++;assert.equal(rows[1].getElementsByTagName('td')[2].textContent,'Petron');cov_vcg2pxppw().s[80]++;assert.equal(rows[0].getElementsByTagName('td')[2].textContent,'Shell');",
              "err": {},
              "uuid": "77d4e350-97f8-4ec9-a194-39e6910e6411",
              "parentUUID": "4e928bc9-ab38-4478-9418-cf5cc52a31eb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "77d4e350-97f8-4ec9-a194-39e6910e6411"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "cdc3e61d-3693-4a4d-ae29-ece7df455c29",
          "title": "the function to sort the entries of the table in ascending order based on the price",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\transaction-delivery-util-test.js",
          "file": "\\test\\transaction-delivery-util-test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"the function to sort the entries of the table in ascending order based on the price\"",
              "fullTitle": "the function to sort the entries of the table in ascending order based on the price \"before each\" hook in \"the function to sort the entries of the table in ascending order based on the price\"",
              "timedOut": false,
              "duration": 30,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_vcg2pxppw().f[23]++;const dom=(cov_vcg2pxppw().s[83]++,new JSDOM(htmlDom,{url:'http://localhost'}));cov_vcg2pxppw().s[84]++;global.window=dom.window;cov_vcg2pxppw().s[85]++;global.document=dom.window.document;cov_vcg2pxppw().s[86]++;global.$=global.jQuery=require('jquery');",
              "err": {},
              "uuid": "8f73a700-cf20-4db2-a51f-3563e6e90958",
              "parentUUID": "cdc3e61d-3693-4a4d-ae29-ece7df455c29",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should sort the entries in ascending order based on the price",
              "fullTitle": "the function to sort the entries of the table in ascending order based on the price should sort the entries in ascending order based on the price",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_vcg2pxppw().f[24]++;cov_vcg2pxppw().s[88]++;sortLowToHigh('tbl2');const rows=(cov_vcg2pxppw().s[89]++,$('#tbl2 > tbody > tr'));cov_vcg2pxppw().s[90]++;assert.equal(rows[0].getElementsByTagName('td')[3].textContent,'₱ 9');cov_vcg2pxppw().s[91]++;assert.equal(rows[1].getElementsByTagName('td')[3].textContent,'₱ 60');cov_vcg2pxppw().s[92]++;assert.equal(rows[2].getElementsByTagName('td')[3].textContent,'₱ 120');",
              "err": {},
              "uuid": "7de12478-3a79-49c4-b75f-13b074ed0761",
              "parentUUID": "cdc3e61d-3693-4a4d-ae29-ece7df455c29",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7de12478-3a79-49c4-b75f-13b074ed0761"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "e9a2d44c-b216-480e-980a-f7eee5ef1ae5",
          "title": "the function to sort the entries of the table in descending order based on the price",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\transaction-delivery-util-test.js",
          "file": "\\test\\transaction-delivery-util-test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"the function to sort the entries of the table in descending order based on the price\"",
              "fullTitle": "the function to sort the entries of the table in descending order based on the price \"before each\" hook in \"the function to sort the entries of the table in descending order based on the price\"",
              "timedOut": false,
              "duration": 20,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_vcg2pxppw().f[26]++;const dom=(cov_vcg2pxppw().s[95]++,new JSDOM(htmlDom,{url:'http://localhost'}));cov_vcg2pxppw().s[96]++;global.window=dom.window;cov_vcg2pxppw().s[97]++;global.document=dom.window.document;cov_vcg2pxppw().s[98]++;global.$=global.jQuery=require('jquery');",
              "err": {},
              "uuid": "0d600514-699e-4005-8b67-33f6e507caae",
              "parentUUID": "e9a2d44c-b216-480e-980a-f7eee5ef1ae5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should sort the entries in descending order based on the price",
              "fullTitle": "the function to sort the entries of the table in descending order based on the price should sort the entries in descending order based on the price",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_vcg2pxppw().f[27]++;cov_vcg2pxppw().s[100]++;sortHighToLow('tbl2');const rows=(cov_vcg2pxppw().s[101]++,$('#tbl2 > tbody > tr'));cov_vcg2pxppw().s[102]++;assert.equal(rows[2].getElementsByTagName('td')[3].textContent,'₱ 9');cov_vcg2pxppw().s[103]++;assert.equal(rows[1].getElementsByTagName('td')[3].textContent,'₱ 60');cov_vcg2pxppw().s[104]++;assert.equal(rows[0].getElementsByTagName('td')[3].textContent,'₱ 120');",
              "err": {},
              "uuid": "f4497bfe-696d-4484-a80a-bb8cc375b668",
              "parentUUID": "e9a2d44c-b216-480e-980a-f7eee5ef1ae5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f4497bfe-696d-4484-a80a-bb8cc375b668"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "f0f2b26c-4bac-4b9f-8448-f59979b3283a",
          "title": "the function to check if a phone number is valid based on its length",
          "fullFile": "C:\\Users\\Edward\\Documents\\powerzone-inventory\\test\\transaction-delivery-validate-util-test.js",
          "file": "\\test\\transaction-delivery-validate-util-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return a Boolean",
              "fullTitle": "the function to check if a phone number is valid based on its length should return a Boolean",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2aldvi50vm().f[1]++;const result=(cov_2aldvi50vm().s[4]++,isValidPhoneNumber('12345678'));cov_2aldvi50vm().s[5]++;assert.isBoolean(result);",
              "err": {},
              "uuid": "0f18654c-40c2-4b19-a929-063addd54e72",
              "parentUUID": "f0f2b26c-4bac-4b9f-8448-f59979b3283a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if the phone number has less than 7 digits",
              "fullTitle": "the function to check if a phone number is valid based on its length should return false if the phone number has less than 7 digits",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2aldvi50vm().f[2]++;const result=(cov_2aldvi50vm().s[7]++,isValidPhoneNumber('123456'));cov_2aldvi50vm().s[8]++;assert.isFalse(result);",
              "err": {},
              "uuid": "0981251c-936f-4ff6-bcdb-1b97b7cdbe95",
              "parentUUID": "f0f2b26c-4bac-4b9f-8448-f59979b3283a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if the phone number has more than 15 digits",
              "fullTitle": "the function to check if a phone number is valid based on its length should return false if the phone number has more than 15 digits",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2aldvi50vm().f[3]++;const result=(cov_2aldvi50vm().s[10]++,isValidPhoneNumber('1234561234561234'));cov_2aldvi50vm().s[11]++;assert.isFalse(result);",
              "err": {},
              "uuid": "094b0fbc-ec5f-4f82-abfc-1943c909b387",
              "parentUUID": "f0f2b26c-4bac-4b9f-8448-f59979b3283a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true if the phone number has 7 digits",
              "fullTitle": "the function to check if a phone number is valid based on its length should return true if the phone number has 7 digits",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2aldvi50vm().f[4]++;const result=(cov_2aldvi50vm().s[13]++,isValidPhoneNumber('1234567'));cov_2aldvi50vm().s[14]++;assert.isTrue(result);",
              "err": {},
              "uuid": "e936bd9b-1e70-4448-806c-3b0d0ebb0838",
              "parentUUID": "f0f2b26c-4bac-4b9f-8448-f59979b3283a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true if the phone number has 15 digits",
              "fullTitle": "the function to check if a phone number is valid based on its length should return true if the phone number has 15 digits",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2aldvi50vm().f[5]++;const result=(cov_2aldvi50vm().s[16]++,isValidPhoneNumber('123456123456123'));cov_2aldvi50vm().s[17]++;assert.isTrue(result);",
              "err": {},
              "uuid": "8a1ccc21-4f0e-42d5-9577-127d0d6edb18",
              "parentUUID": "f0f2b26c-4bac-4b9f-8448-f59979b3283a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true if the phone number between 7 and 15 digits",
              "fullTitle": "the function to check if a phone number is valid based on its length should return true if the phone number between 7 and 15 digits",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cov_2aldvi50vm().f[6]++;const result=(cov_2aldvi50vm().s[19]++,isValidPhoneNumber('123456789'));cov_2aldvi50vm().s[20]++;assert.isTrue(result);",
              "err": {},
              "uuid": "238b7a19-6486-4440-a197-21138ccc1f4e",
              "parentUUID": "f0f2b26c-4bac-4b9f-8448-f59979b3283a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0f18654c-40c2-4b19-a929-063addd54e72",
            "0981251c-936f-4ff6-bcdb-1b97b7cdbe95",
            "094b0fbc-ec5f-4f82-abfc-1943c909b387",
            "e936bd9b-1e70-4448-806c-3b0d0ebb0838",
            "8a1ccc21-4f0e-42d5-9577-127d0d6edb18",
            "238b7a19-6486-4440-a197-21138ccc1f4e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.1.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": null,
      "version": "6.0.1"
    }
  }
}